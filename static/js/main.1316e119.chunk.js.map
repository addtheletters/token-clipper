{"version":3,"sources":["components/SourceSelector.tsx","components/ImageControls.tsx","components/ImageEffect.tsx","components/MaskEffect.tsx","components/CodeControls.tsx","components/CodeEffect.tsx","components/EffectLayer.tsx","components/LayerAdder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SourceType","BUILT_INS","Mask Circle (radius 128px)","Mask Square (side 256px)","Yuratzu of Pain (167 x 173px)","SourceSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleURLInputChange","event","target","value","length","onSourceChange","URL","toString","err","console","log","handleFileInputChange","files","createObjectURL","error","handleBuiltInChange","setState","selectedBuiltIn","handleSourceTypeChange","selectedType","BuiltIn","state","LocalFile","keys","subSelector","typeList","map","k","t","react","key","s","prettySource","type","accept","name","onChange","subList","className","React","INCS","ImageControls","handleSliderChange","handlers","onSliderChange","parseFloat","handleSourceChange","xoffset_scaled","control","xoffset","yoffset_scaled","yoffset","scale_scaled","scale","components_SourceSelector","min","max","el","url","src","getFreshState","getHandlers","getControlState","CORS_PROXY_URL","ImageEffect","controlFuncs","preLoad","internal","text","preDraw","img","tmpsrc","trim","loadImage","warn","clear","draw","image","baseImg","imgw","width","imgh","height","size","textSize","MaskEffect","mask","createImage","psize","loadPixels","i","pixels","updatePixels","CodeControls","handleTextFieldChanged","onCodeChanged","USER_CODE_INSTANCE_NAME","errorText","codeText","code","TIME_LIMIT","runInWrapper","__code__","__instance__","__wrapper__","instance","wrapper","timeExpired","timerHandle","proxy","undefined","window","setTimeout","w","Proxy","get","property","receiver","EvalError","getP5InstanceWrapper","Function","clearTimeout","EffectType","CodeEffect","layer","oldCode","noError","handleError","errorString","codeValid","message","getSketcher","parent","effect","preload","setup","createCanvas","basepixels","onNewOutput","onOutput","Uint8ClampedArray","from","EffectLayer","canvas","last_output","handleBasePixelsChanged","handleRemoveButtonPressed","onRemove","ind","differs","getCanvasID","callbackContainer","onNewBasePixels","et","Image","Mask","Code","getEffect","objectSpread","p5","document","getElementById","bp","getLastResultPixels","remove","controls","components_ImageControls","components_CodeControls","id","onClick","LayerAdder","e","effects","handleSelection","selected","handleAdd","onAdd","push","effectList","SIZE","App","freeKey","results","newLayer","baseRequest","layers","end","newLayers","concat","handleNewOutput","effectIndex","handleAddEffect","handleRemoveEffect","slice","_this2","layerList","index","react_default","a","createElement","components_EffectLayer","components_LayerAdder","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1316e119.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ninterface Props {\r\n    onSourceChange : (url:string) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedType : SourceType;\r\n    selectedBuiltIn : string;\r\n}\r\n\r\nenum SourceType {\r\n    BuiltIn = \"built-in\",\r\n    LocalFile = \"local-file\",\r\n    URL = \"url\",\r\n}\r\n\r\nfunction prettySource(s : SourceType): string {\r\n    switch (s) {\r\n        case SourceType.BuiltIn:\r\n            return \"Built-in\";\r\n        case SourceType.LocalFile:\r\n            return \"Local file\";\r\n        case SourceType.URL:\r\n            return \"URL\";\r\n        default:\r\n            return \"unknown source type\";\r\n    }\r\n}\r\n\r\ninterface BuiltIns {\r\n    [x:string] : string;\r\n}\r\n\r\nconst BUILT_INS : BuiltIns = {\r\n    \"Mask Circle (radius 128px)\"    : \"assets/circle-alpha-512.png\",\r\n    \"Mask Square (side 256px)\"      : \"assets/square-alpha-512.png\",\r\n    \"Yuratzu of Pain (167 x 173px)\" : \"assets/yuratzu.png\",\r\n};\r\n\r\nclass SourceSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedType: SourceType.LocalFile,\r\n            selectedBuiltIn : Object.keys(BUILT_INS)[0],\r\n        };\r\n    }\r\n\r\n    handleURLInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value && event.target.value.length > 0) {\r\n            try {\r\n                this.props.onSourceChange((new URL(event.target.value)).toString());\r\n            }\r\n            catch (err){\r\n                console.log(\"SourceSelector: could not interpret URL\");\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFileInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files != null && event.target.files.length > 0) {\r\n            this.props.onSourceChange(URL.createObjectURL(event.target.files[0]));\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: file invalid\");\r\n        }\r\n    }\r\n\r\n    handleBuiltInChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (event.target.value in BUILT_INS) {\r\n            this.setState({selectedBuiltIn : event.target.value});\r\n            this.props.onSourceChange(BUILT_INS[event.target.value]);\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: built-in doesn't exist: \" + event.target.value);\r\n        }\r\n    };\r\n\r\n    handleSourceTypeChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({selectedType:event.target.value as SourceType});\r\n        if (event.target.value === SourceType.BuiltIn) {\r\n            // load selected built-in immediately\r\n            this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const typeList = Object.keys(SourceType).map(k => {\r\n                let t = SourceType[k as any];\r\n                return (<option value={t} key={t}>{prettySource(t as SourceType)}</option>);\r\n            });\r\n\r\n        let subSelector;\r\n        switch (this.state.selectedType) {\r\n            case SourceType.LocalFile:\r\n                subSelector = (\r\n                    <input type=\"file\" accept=\"image/*\" name=\"src-file\"\r\n                        onChange={this.handleFileInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.URL:\r\n                subSelector = (\r\n                    <input type=\"url\" name=\"src-url\"\r\n                        onChange={this.handleURLInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.BuiltIn:\r\n                let subList = Object.keys(BUILT_INS).map(k => {\r\n                    return (<option value={k} key={k}>{k}</option>);\r\n                });\r\n                subSelector = (\r\n                    <select name=\"src-builtin\" value={this.state.selectedBuiltIn}\r\n                        onChange={this.handleBuiltInChange}>\r\n                        {subList}\r\n                    </select>\r\n                    );\r\n                break;\r\n            default:\r\n                subSelector = (<div>unknown source type {this.state.selectedType}</div>);\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"source-select\">\r\n                <div className=\"source-select-type\">\r\n                    <select value={this.state.selectedType} onChange={this.handleSourceTypeChange}>\r\n                        {typeList}\r\n                    </select>\r\n                </div>\r\n                <div className=\"source-select-sub\">\r\n                    {subSelector}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SourceSelector;\r\n","import * as React from 'react';\r\nimport EffectLayer, {ControlComponent} from './EffectLayer'\r\nimport SourceSelector from './SourceSelector'\r\n\r\nconst INCS = 100; // number of increments per (0,1) interval for slider\r\nconst MAX_SCALE = 5;\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface ImageControlState {\r\n    xoffset : number;\r\n    yoffset : number;\r\n    scale : number;\r\n    src?: string;\r\n}\r\n\r\nexport interface ImageControlHandlers {\r\n    onSliderChange: (name:string, value:number) => void;\r\n    onSourceChange: (url:string) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : ImageControlState,\r\n    handlers : ImageControlHandlers,\r\n}\r\n\r\nclass ImageControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : ImageControls.getFreshState,\r\n            getHandlers : ImageControls.getHandlers,\r\n            getControlState : ImageControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : ImageControlState = {\r\n            xoffset : 0,\r\n            yoffset : 0,\r\n            scale : 1,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : ImageControlHandlers = {\r\n            onSliderChange: (name : string, value : number) => {\r\n                if (name === \"xoffset\") {\r\n                    el.setState({ xoffset:value });\r\n                }\r\n                else if (name === \"yoffset\") {\r\n                    el.setState({ yoffset:value });\r\n                }\r\n                else if (name === \"scale\") {\r\n                    el.setState({ scale:value});\r\n                }\r\n                else {\r\n                    console.log(\"ImageEffect: unknown slider change \" + name);\r\n                }\r\n            },\r\n\r\n            onSourceChange: (url: string) => {\r\n                el.setState({ src:url });\r\n            }\r\n        }\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : ImageControlState = {\r\n            xoffset: el.state.xoffset,\r\n            yoffset: el.state.yoffset,\r\n            scale: el.state.scale,\r\n            src: el.state.src,\r\n        }\r\n        return ctrl;\r\n    };\r\n\r\n    handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onSliderChange(event.target.name, parseFloat(event.target.value) / INCS);\r\n    };\r\n\r\n    handleSourceChange = this.props.handlers.onSourceChange;\r\n\r\n    render() {\r\n        const xoffset_scaled = this.props.control.xoffset * INCS;\r\n        const yoffset_scaled = this.props.control.yoffset * INCS;\r\n        const scale_scaled = this.props.control.scale * INCS;\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                   <SourceSelector onSourceChange={this.handleSourceChange}/>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <div>\r\n                      <div>X Offset</div>\r\n                      <input type=\"range\" name=\"xoffset\" value={xoffset_scaled}\r\n                             min={-INCS} max={INCS} onChange={this.handleSliderChange}/>\r\n                    </div>\r\n                    <div>\r\n                      <div>Y Offset</div>\r\n                      <input type=\"range\" name=\"yoffset\" value={yoffset_scaled}\r\n                             min={-INCS} max={INCS} onChange={this.handleSliderChange}/>\r\n                    </div>\r\n                    <div>\r\n                      <div>Scale</div>\r\n                      <input type=\"range\" name=\"scale\" value={scale_scaled}\r\n                             min={1} max={INCS*MAX_SCALE} onChange={this.handleSliderChange}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageControls;\r\n","import {Effect, Sketcher} from './EffectLayer'\r\nimport ImageControls from './ImageControls'\r\n\r\nconst ALT_TEXT = \"load failed\\n\"\r\n                 + \"   (CORS not allowed?)\";\r\n\r\n// server that can apply the Access-Control-Allow-Origin header\r\nconst CORS_PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nvar ImageEffect : Effect = {\r\n    name : \"Image\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s : Sketcher) => {\r\n        s.internal.text = \"no image\";\r\n    },\r\n\r\n    preDraw : (s : Sketcher) => {\r\n        // if image src has changed, reload\r\n        if (s.state.src && s.state.src !== s.internal.src) {\r\n            s.internal.src = s.state.src;\r\n            s.internal.img = null;\r\n\r\n            let tmpsrc = s.state.src.trim();\r\n\r\n            // these functions don't support Promises yet :(\r\n            s.loadImage(tmpsrc, (img : p5.Image) => {\r\n                s.internal.img = img;\r\n            },\r\n            (err) => {\r\n                s.internal.text = ALT_TEXT;\r\n\r\n                if (CORS_PROXY_URL) {\r\n                    // if we failed to load, try to fetch image through a CORS-friendly proxy\r\n                    console.log(\"ImageEffect: load failed, attempting via proxy \" + CORS_PROXY_URL);\r\n                    s.loadImage(CORS_PROXY_URL + tmpsrc,\r\n                        (img : p5.Image) => {\r\n                            console.log(\"retreived image.\");\r\n                            s.internal.img = img;\r\n                        },\r\n                        (err) => {\r\n                            console.warn(\"CORS proxy failed.\");\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // clear canvas\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s : Sketcher) => {\r\n        // draw base pixels to canvas\r\n        s.image(s.baseImg, 0, 0);\r\n\r\n        if (s.internal.img) {\r\n            // draw image\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n        }\r\n        else {\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset + \",\" + s.state.yoffset + \")\\n\" +\r\n                   \"   x \" + s.state.scale + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n    },\r\n}\r\n\r\nexport default ImageEffect;\r\n","import {Effect, Sketcher} from './EffectLayer'\r\nimport ImageControls from './ImageControls'\r\nimport ImageEffect from './ImageEffect'\r\n\r\nvar MaskEffect : Effect = {\r\n    name : \"Mask\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher) => {\r\n        s.internal.mask = s.createImage(s.props.size, s.props.size);\r\n        s.internal.text = \"no mask\";\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n\r\n        // load mask like any other image\r\n        ImageEffect.preDraw(s);\r\n\r\n        // when loaded, try to draw on blank and re-save as mask matching image size\r\n        if (s.internal.img) {\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            // draw\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n\r\n            // copy into mask buffer\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.loadPixels();\r\n            s.internal.mask.loadPixels();\r\n            for (let i = 0; i < psize; i++) {\r\n                s.internal.mask.pixels[i] = s.pixels[i];\r\n            }\r\n            s.internal.mask.updatePixels();\r\n        }\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        if (s.internal.img) {\r\n            // apply mask to base pixels\r\n            s.baseImg.mask(s.internal.mask);\r\n\r\n            // draw to canvas\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n        else {\r\n            s.image(s.baseImg, 0, 0);\r\n\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset + \",\" + s.state.yoffset + \")\\n\" +\r\n                   \"   x \" + s.state.scale + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n    },\r\n}\r\n\r\nexport default MaskEffect;\r\n","import * as React from 'react';\r\nimport EffectLayer, {ControlComponent} from './EffectLayer'\r\nimport {getUserInstanceName} from './CodeEffect'\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface CodeControlState {\r\n    codeText : string;\r\n    errorText : string;\r\n}\r\n\r\nexport interface CodeControlHandlers {\r\n    onCodeChanged : (code : string) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : CodeControlState,\r\n    handlers : CodeControlHandlers,\r\n}\r\n\r\nclass CodeControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : CodeControls.getFreshState,\r\n            getHandlers : CodeControls.getHandlers,\r\n            getControlState : CodeControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : CodeControlState = {\r\n            codeText : \"\",\r\n            errorText : \"-\",\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : CodeControlHandlers = {\r\n            onCodeChanged: (code: string) => {\r\n                el.setState({ codeText: code });\r\n            },\r\n        };\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : CodeControlState = {\r\n            codeText : el.state.codeText,\r\n            errorText: el.state.errorText,\r\n        };\r\n        return ctrl;\r\n    };\r\n\r\n    handleTextFieldChanged = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        this.props.handlers.onCodeChanged(event.target.value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-label\">\r\n                    instance name: `{getUserInstanceName()}`\r\n                </div>\r\n                <div className=\"controls-info\">\r\n                    {this.props.control.errorText}\r\n                </div>\r\n                <div className=\"controls-area\">\r\n                    <textarea className=\"code-area\"\r\n                            value={this.props.control.codeText}\r\n                            onChange={this.handleTextFieldChanged}></textarea>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeControls;\r\n","import EffectLayer, {Effect, Sketcher} from './EffectLayer';\r\nimport CodeControls from './CodeControls';\r\n\r\n// Paint Effect.\r\n// Allows user to input p5 commands to draw, or choose from some presets.\r\n// Dangerous evals? probably.\r\n\r\n// time-out for code execution\r\nconst TIME_LIMIT : number = 500;\r\nconst USER_CODE_INSTANCE_NAME : string = \"pfive\";\r\n\r\nexport function getUserInstanceName() {\r\n    return USER_CODE_INSTANCE_NAME;\r\n}\r\n\r\ninterface SketchWrapper {\r\n    timeExpired: boolean;\r\n    timerHandle: number;\r\n    proxy : any;\r\n}\r\n\r\nfunction getP5InstanceWrapper(instance: p5) : SketchWrapper {\r\n    let wrapper : SketchWrapper = {\r\n        timeExpired: false,\r\n        timerHandle: 0,\r\n        proxy: undefined,\r\n    };\r\n    wrapper.timerHandle = window.setTimeout(\r\n        function(w : SketchWrapper) {\r\n            console.log(\"PaintEffect: Painting code execution time expired.\");\r\n            w.timeExpired = true;\r\n        }, TIME_LIMIT, wrapper);\r\n    wrapper.proxy = new Proxy(instance,\r\n    {\r\n        get: function(target : any, property, receiver) {\r\n            if (wrapper.timeExpired) {\r\n                throw EvalError(\"Code execution time for painting expired (\" + TIME_LIMIT + \" ms).\");\r\n            }\r\n            return target[property];\r\n        },\r\n    });\r\n    return wrapper;\r\n}\r\n\r\n// wrap the p5 instance.\r\n// before every p5 function call, check for timeout.\r\n// throws an error if so.\r\nfunction runInWrapper(__code__: string, __instance__: p5) {\r\n    let __wrapper__ = getP5InstanceWrapper(__instance__);\r\n    try {\r\n        // eval is dangerous.\r\n        // Instead, we could try interpreting each line as an individual p5 function call?\r\n        // It would make this much less powerful, but whatever;\r\n        // this isn't intended for complex drawing anyway.\r\n\r\n        // eslint-disable-next-line no-new-func\r\n        Function(USER_CODE_INSTANCE_NAME,\r\n            '\"use strict\";' +\r\n            '{;' + __code__ + ';}')(__wrapper__.proxy);\r\n    }\r\n    catch (err) {\r\n        window.clearTimeout(__wrapper__.timerHandle);\r\n        //console.log(\"PaintEffect: eval failed, throwing up error\");\r\n        throw err; // toss error up to be caught in draw()\r\n    }\r\n    return __wrapper__;\r\n}\r\n\r\nvar CodeEffect : Effect = {\r\n    name : \"Code\",\r\n    control : CodeControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => {\r\n        s.internal.oldCode = \"\";\r\n        s.internal.noError = false;\r\n\r\n        s.internal.handleError = function(errorString : string) {\r\n            layer.setState({ errorText : errorString });\r\n        };\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        // draw base pixels\r\n        s.image(s.baseImg, 0, 0);\r\n\r\n        // try to run user painting code\r\n        // only try run if valid already valid or code has changed\r\n        if (s.state.codeText !== s.internal.oldCode || s.internal.codeValid) {\r\n            // only run if we have code\r\n            if (s.state.codeText && s.state.codeText.length > 0) {\r\n                try {\r\n                    let wrapper = runInWrapper(s.state.codeText, s);\r\n                    window.clearTimeout(wrapper.timerHandle);\r\n                    s.internal.codeValid = true;\r\n                    s.internal.handleError(\"no errors! :)\");\r\n                }\r\n                catch (err) {\r\n                    s.internal.codeValid = false;\r\n                    s.internal.handleError(err.message);\r\n                }\r\n            }\r\n            else {\r\n                s.internal.handleError(\"-\");\r\n            }\r\n            s.internal.oldCode = s.state.codeText;\r\n        }\r\n    },\r\n}\r\n\r\nexport default CodeEffect;\r\n","import * as React from 'react';\r\nimport {Layer} from '../App';\r\nimport ImageEffect from './ImageEffect';\r\nimport MaskEffect from './MaskEffect';\r\nimport CodeEffect from './CodeEffect';\r\nimport ImageControls from './ImageControls';\r\nimport CodeControls from './CodeControls';\r\n\r\ninterface Props {\r\n    size : number;\r\n    ind : number;\r\n    type: EffectType;\r\n    callbackContainer: Layer;\r\n    onNewOutput?: (eindex: number, pixels: Uint8ClampedArray) => void;\r\n    onRemove?: (eindex: number) => void;\r\n}\r\n\r\nexport interface ControlComponent {\r\n    getFreshState: ()=>any;\r\n    getHandlers: (el:EffectLayer)=>any;\r\n    getControlState: (el:EffectLayer)=>any;\r\n}\r\n\r\nexport interface Effect {\r\n    name : string;\r\n    control : ControlComponent; // ControlComponent, but static interfaces don't exist\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => void; // one-time initialization\r\n    preDraw : (s:Sketcher) => void; // prepare to draw; usually clear canvas\r\n    draw : (s:Sketcher) => void;    // draw the effect to the canvas\r\n}\r\n\r\ninterface State {\r\n    [x:string]: any; // lifted state from inner components\r\n    basepixels?: Uint8ClampedArray; // (size * size * 4) length\r\n}\r\n\r\nexport enum EffectType {\r\n    Image = \"image\",\r\n    Mask = \"mask\",\r\n    Code = \"code\",\r\n}\r\n\r\nfunction getEffect(et : EffectType) {\r\n    switch (et) {\r\n        case EffectType.Image:\r\n            return ImageEffect;\r\n        case EffectType.Mask:\r\n            return MaskEffect;\r\n        case EffectType.Code:\r\n            return CodeEffect;\r\n        default:\r\n            console.warn(\"tried to get unknown effect \" + et + \": defaulting to ImageEffect\");\r\n            return ImageEffect;\r\n    }\r\n}\r\n\r\nexport interface Sketcher extends p5 {\r\n    props : Props;\r\n    state : State;\r\n    internal : any;\r\n    baseImg: p5.Image;\r\n}\r\n\r\nfunction getSketcher(parent : EffectLayer, effect : Effect) {\r\n    let sketcher = function (s : Sketcher) {\r\n        s.props = parent.props;\r\n        s.state = parent.state;\r\n        s.internal = {}; // for use by effect\r\n\r\n        s.preload = function() {\r\n            s.baseImg = s.createImage(s.props.size, s.props.size);\r\n\r\n            // one-time effect initialization\r\n            effect.preLoad(s, parent);\r\n        }\r\n\r\n        s.setup = function() {\r\n            s.createCanvas(s.props.size, s.props.size);\r\n        }\r\n\r\n        function preDraw() {\r\n            // re-fetch state.\r\n            s.state = parent.state;\r\n\r\n            // apply base pixels from previous layer to buffer image\r\n            if (s.state.basepixels) {\r\n                let psize = s.props.size * s.props.size * 4;\r\n                s.baseImg.loadPixels();\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = s.state.basepixels[i];\r\n                }\r\n                s.baseImg.updatePixels();\r\n            }\r\n\r\n            // prepare to draw this frame\r\n            effect.preDraw(s);\r\n        }\r\n\r\n        s.draw = function() {\r\n            preDraw();\r\n\r\n            // draw this frame\r\n            effect.draw(s);\r\n\r\n            // inform that new pixels are created\r\n            if (parent.props.onNewOutput) {\r\n                s.loadPixels();\r\n                parent.onOutput(Uint8ClampedArray.from(s.pixels));\r\n            }\r\n        }\r\n    };\r\n    return sketcher;\r\n}\r\n\r\nclass EffectLayer extends React.Component<Props, State> {\r\n    canvas?: p5;\r\n    last_output?: Uint8ClampedArray;\r\n    effect: Effect;\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.props.callbackContainer.onNewBasePixels = this.handleBasePixelsChanged;\r\n        this.effect = getEffect(this.props.type);\r\n        this.state = {\r\n            ...this.effect.control.getFreshState(),\r\n        };\r\n        this.canvas = undefined;\r\n    }\r\n\r\n    handleBasePixelsChanged = (pixels : Uint8ClampedArray) => {\r\n        this.setState({ basepixels: pixels });\r\n    }\r\n\r\n    handleRemoveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onRemove) {\r\n            this.props.onRemove(this.props.ind);\r\n        }\r\n    }\r\n\r\n    onOutput = (pixels : Uint8ClampedArray) => {\r\n        if (!this.props.onNewOutput) {\r\n            return;\r\n        }\r\n        // only callback (trigger other effect components' state change)\r\n        // if comparing pixels has a result\r\n        let differs : boolean = false;\r\n        if (!this.last_output || pixels.length !== this.last_output.length) {\r\n            differs = true;\r\n        }\r\n        else {\r\n            for (let i = 0; i < pixels.length; i++) {\r\n                if (this.last_output[i] !== pixels[i]) {\r\n                    differs = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (differs) {\r\n            this.props.onNewOutput(this.props.ind, pixels);\r\n            this.last_output = pixels;\r\n        }\r\n        return;\r\n    }\r\n\r\n    getCanvasID = () => {\r\n        return \"image-canvas-\" + this.props.ind;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = new window.p5(getSketcher(this, this.effect), document.getElementById(this.getCanvasID()) as HTMLElement);\r\n        let bp = this.props.callbackContainer.getLastResultPixels();\r\n        if (bp) {\r\n            this.setState({ basepixels : bp });\r\n        }\r\n        else {\r\n            console.log(\"EffectLayer: no initial base pixels\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log(\"EffectLayer: unmounting\");\r\n        if (this.canvas) {\r\n            this.canvas.remove();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let controls = <div className=\"controls\"></div>;\r\n        switch (this.props.type) {\r\n            case EffectType.Image:\r\n            case EffectType.Mask:\r\n                controls = (\r\n                    <ImageControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            case EffectType.Code:\r\n                controls = (\r\n                    <CodeControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            default:\r\n                console.error(\"EffectLayer: can't render controls for unknown effect type\");\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"effect-container\" id={\"effect-container\"+this.props.ind}>\r\n                <div className=\"effect-title\">\r\n                    <div>[{this.props.ind + 1}]</div>\r\n                    <div>{this.effect.name}</div>\r\n                    <button className=\"effect-remove-button\" onClick={this.handleRemoveButtonPressed}>remove</button>\r\n                </div>\r\n                <div className=\"effect-canvas\">\r\n                    <div className=\"canvas-container\" id={this.getCanvasID()}></div>\r\n                </div>\r\n                {controls}\r\n            </div>\r\n        );\r\n    }\r\n    // xoffset={this.state.xoffset} yoffset={this.state.yoffset} scale={this.state.scale}\r\n}\r\n\r\nexport default EffectLayer;\r\n","import * as React from 'react';\r\nimport {EffectType} from './EffectLayer'\r\n\r\nexport interface Props {\r\n    onAdd : (et : EffectType) => void;\r\n}\r\n\r\ninterface State {\r\n    selected : EffectType;\r\n}\r\n\r\nclass LayerAdder extends React.Component<Props, State> {\r\n    effects : Array<EffectType>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.effects = [];\r\n        for (let e in EffectType) {\r\n            this.effects.push(EffectType[e] as EffectType);\r\n        }\r\n        this.state = {selected:this.effects[0]};\r\n    }\r\n\r\n    handleSelection = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        let i : number;\r\n        for (i = 0; i < this.effects.length; i++) {\r\n            if (this.effects[i] === event.target.value) {\r\n                this.setState({ selected : this.effects[i] });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAdd = () => {\r\n        this.props.onAdd(this.state.selected);\r\n    }\r\n\r\n    render() {\r\n        const effectList = this.effects.map((effect) => \r\n                <option value={effect} key={effect}>{effect}</option>\r\n            );\r\n        return (\r\n            <div>\r\n                <div>effects?</div>\r\n                <select value={this.state.selected} onChange={this.handleSelection}>\r\n                    {effectList}\r\n                </select>\r\n                <button onClick={this.handleAdd}>add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LayerAdder;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LayerAdder from './components/LayerAdder'\r\nimport EffectLayer from './components/EffectLayer'\r\nimport {EffectType} from './components/EffectLayer'\r\n\r\nexport const SIZE = 256;\r\n\r\nexport interface Layer {\r\n    type : EffectType;\r\n    key : number;\r\n    onNewBasePixels: (pixels : Uint8ClampedArray) => void; // empty until an EffectLayer constructor supplies it\r\n    getLastResultPixels: () => Uint8ClampedArray | null;   // hacky implementation, only call once during layer creation\r\n}\r\n\r\ninterface State {\r\n    layers : Array<Layer>;\r\n}\r\n\r\nclass App extends React.Component<any,State> {\r\n  freeKey : number = 0;\r\n  results : Array<Uint8ClampedArray> = [];\r\n\r\n  constructor(props:any) {\r\n    super(props);\r\n    this.state = { layers : [] };\r\n  }\r\n\r\n  newLayer = (et : EffectType) => {\r\n    let baseRequest : () => Uint8ClampedArray | null = () => null;\r\n\r\n    // when adding a new layer, this is a hacky way of getting\r\n    // the most recent result from the previously final layer.\r\n    // trying to call this function again after some layer removals\r\n    // have been performed will fail. this should probably be replaced.\r\n    if (this.state.layers.length >= 1) {\r\n      let end = this.state.layers.length - 1;\r\n      baseRequest = () => {\r\n        return this.results[end];\r\n      };\r\n    }\r\n\r\n    const newLayers = this.state.layers.concat(\r\n        { type:et,\r\n          key:this.freeKey,\r\n          onNewBasePixels:()=>{},\r\n          getLastResultPixels: baseRequest,\r\n        }\r\n      );\r\n    this.freeKey++;\r\n    this.results.push(new Uint8ClampedArray(SIZE * SIZE * 4));\r\n    this.setState({ layers : newLayers });\r\n  }\r\n\r\n  handleNewOutput = (effectIndex : number, pixels : Uint8ClampedArray) => {\r\n    this.results[effectIndex] = pixels;\r\n    if (effectIndex < this.state.layers.length - 1) {\r\n      this.state.layers[effectIndex+1].onNewBasePixels(pixels);\r\n    }\r\n    return;\r\n  }\r\n\r\n  handleAddEffect = (et : EffectType) => {\r\n    this.newLayer(et);\r\n  }\r\n\r\n  handleRemoveEffect = (effectIndex : number) => {\r\n    if (effectIndex < 0 || effectIndex >= this.state.layers.length) {\r\n      console.error(\"can't remove effect at bad index \" + effectIndex);\r\n      return;\r\n    }\r\n    if (effectIndex < this.state.layers.length - 1) {\r\n      if (effectIndex > 0) {\r\n        this.state.layers[effectIndex+1].onNewBasePixels(this.results[effectIndex-1]);\r\n      }\r\n      else {\r\n        this.state.layers[effectIndex+1].onNewBasePixels(new Uint8ClampedArray(SIZE * SIZE * 4));\r\n      }\r\n    }\r\n    const newLayers = this.state.layers.slice(0,effectIndex).concat(this.state.layers.slice(effectIndex+1));\r\n    this.setState({ layers : newLayers });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.newLayer(EffectType.Image);\r\n  }\r\n\r\n  render() {\r\n    const layerList = this.state.layers.map((layer, index) => \r\n        <EffectLayer key={layer.key} type={layer.type} size={SIZE} ind={index}\r\n            callbackContainer={layer}\r\n            onNewOutput={this.handleNewOutput}\r\n            onRemove={this.handleRemoveEffect}/>\r\n      );\r\n    return (\r\n      <div className=\"App\">\r\n          <h1>Token Clipper</h1>\r\n          <hr/>\r\n          <LayerAdder onAdd={this.handleAddEffect}/>\r\n          <hr/>\r\n          <div className=\"effect-list\">\r\n            {layerList}\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}