{"version":3,"sources":["components/SourceSelector.tsx","components/ImageControls.tsx","components/ImageEffect.tsx","components/MaskEffect.tsx","components/CodeControls.tsx","components/CodeEffect.tsx","components/EffectLayer.tsx","components/LayerAdder.tsx","components/LayerStack.tsx","components/SizeSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SourceType","BUILT_INS","Yuratzu of Pain (167 x 173px)","Mask Circle (radius 128px)","Mask Square (side 256px)","SourceSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleURLInputChange","event","target","value","length","onSourceChange","URL","toString","err","console","log","handleFileInputChange","files","createObjectURL","error","handleBuiltInChange","setState","selectedBuiltIn","handleSourceTypeChange","selectedType","BuiltIn","state","st","sbi","keys","parentEffectType","EffectType","Mask","Image","LocalFile","subSelector","typeList","map","k","t","react","key","s","prettySource","type","accept","name","onChange","subList","className","React","INCS","ImageControls","handleSliderChange","handlers","onSliderChange","parseFloat","handleCheckboxChange","onInvertChange","checked","handleSourceChange","xoffset_scaled","control","xoffset","yoffset_scaled","yoffset","scale_scaled","scale","invert_text","components_SourceSelector","invert","min","max","el","url","src","getFreshState","getHandlers","getControlState","CORS_PROXY_URL","ImageEffect","controlFuncs","preLoad","internal","text","preDraw","img","tmpsrc","trim","loadImage","warn","clear","draw","image","baseImg","imgw","width","imgh","height","size","textSize","MaskEffect","mask","createImage","psize","loadPixels","i","pixels","updatePixels","CodeControls","handleTextFieldChange","onCodeChange","onShouldEvalChange","shouldEval","USER_CODE_INSTANCE_NAME","errorText","codeText","code","should","TIME_LIMIT_MS","runInWrapper","__code__","__instance__","__wrapper__","instance","wrapper","timeExpired","timerHandle","proxy","undefined","window","setTimeout","w","Proxy","get","property","receiver","EvalError","getP5InstanceWrapper","Function","clearTimeout","CodeEffect","layer","oldCode","codeValid","handleError","errorString","message","EFFECT_RENDERER","getSketcher","parent","effect","preload","setup","pixelDensity","createCanvas","basepixels","onOutput","Uint8ClampedArray","from","EffectLayer","EMPTY_BASE","canvas","handleBasePixelsChanged","handleRemoveButtonPressed","onRemove","ind","handleSaveButtonPressed","saveCanvas","assertThisInitialized","handleMoveUpPressed","onMove","handleMoveDownPressed","onNewOutput","getCanvasID","callbackContainer","onNewBasePixels","et","Code","getEffect","objectSpread","p5","document","getElementById","remove","controls","components_ImageControls","components_CodeControls","id","onClick","disabled","isLast","isFirst","LayerAdder","e","effects","handleSelection","selected","handleAdd","onAdd","push","effectList","LayerStack","freeKey","results","newLayer","newLayers","layers","concat","canvasSize","handleNewOutput","effectIndex","handleAddEffect","handleRemoveEffect","splice","slice","handleMoveEffect","move","newIndex","removed","_this2","layerList","index","components_EffectLayer","components_LayerAdder","SizeSelector","handleSubmit","sizeNum","parseInt","inputCanvasSize","onSizeChange","preventDefault","handleInputChanged","DEFAULT_CANVAS_SIZE","onSubmit","MAX_CANVAS_SIZE","Math","pow","App","handleSizeChange","newSize","react_default","a","createElement","components_SizeSelector","components_LayerStack","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eed3efa.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {EffectType} from './EffectLayer'\r\n\r\nenum SourceType {\r\n    BuiltIn = \"built-in\",\r\n    LocalFile = \"local-file\",\r\n    URL = \"url\",\r\n}\r\n\r\ninterface Props {\r\n    onSourceChange : (url:string) => void;\r\n    parentEffectType ?: EffectType;\r\n}\r\n\r\ninterface State {\r\n    selectedType : SourceType;\r\n    selectedBuiltIn : string;\r\n}\r\n\r\nfunction prettySource(s : SourceType): string {\r\n    switch (s) {\r\n        case SourceType.BuiltIn:\r\n            return \"Built-in\";\r\n        case SourceType.LocalFile:\r\n            return \"Local file\";\r\n        case SourceType.URL:\r\n            return \"URL\";\r\n        default:\r\n            return \"unknown source type\";\r\n    }\r\n}\r\n\r\ninterface BuiltIns {\r\n    [x:string] : string;\r\n}\r\n\r\nconst BUILT_INS : BuiltIns = {\r\n    \"Yuratzu of Pain (167 x 173px)\" : \"assets/yuratzu.png\",\r\n    \"Mask Circle (radius 128px)\"    : \"assets/circle-alpha-512.png\",\r\n    \"Mask Square (side 256px)\"      : \"assets/square-alpha-512.png\",\r\n};\r\n\r\nclass SourceSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        let st  = SourceType.BuiltIn;\r\n        let sbi = Object.keys(BUILT_INS)[0];\r\n\r\n        switch (this.props.parentEffectType) {\r\n            case EffectType.Mask:\r\n                st  = SourceType.BuiltIn;\r\n                sbi = Object.keys(BUILT_INS)[1]; // circle mask\r\n                break;\r\n            case EffectType.Image:\r\n                st  = SourceType.LocalFile;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.state = {\r\n            selectedType: st,\r\n            selectedBuiltIn : sbi,\r\n        };\r\n    }\r\n\r\n    handleURLInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value && event.target.value.length > 0) {\r\n            try {\r\n                this.props.onSourceChange((new URL(event.target.value)).toString());\r\n            }\r\n            catch (err){\r\n                console.log(\"SourceSelector: could not interpret URL\");\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFileInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files != null && event.target.files.length > 0) {\r\n            this.props.onSourceChange(URL.createObjectURL(event.target.files[0]));\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: file invalid\");\r\n        }\r\n    }\r\n\r\n    handleBuiltInChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (event.target.value in BUILT_INS) {\r\n            this.setState({selectedBuiltIn : event.target.value});\r\n            this.props.onSourceChange(BUILT_INS[event.target.value]);\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: built-in doesn't exist: \" + event.target.value);\r\n        }\r\n    };\r\n\r\n    handleSourceTypeChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({selectedType:event.target.value as SourceType});\r\n        if (event.target.value === SourceType.BuiltIn) {\r\n            // load selected built-in immediately\r\n            this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n        }\r\n        else {\r\n            // clear source selection\r\n            this.props.onSourceChange(\"\");\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        switch (this.state.selectedType) {\r\n            case SourceType.BuiltIn:\r\n                // if default builtin, notify to load\r\n                this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const typeList = Object.keys(SourceType).map(k => {\r\n                let t = SourceType[k as any];\r\n                return (<option value={t} key={t}>{prettySource(t as SourceType)}</option>);\r\n            });\r\n\r\n        let subSelector;\r\n        switch (this.state.selectedType) {\r\n            case SourceType.LocalFile:\r\n                subSelector = (\r\n                    <input type=\"file\" accept=\"image/*\" name=\"src-file\"\r\n                        onChange={this.handleFileInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.URL:\r\n                subSelector = (\r\n                    <input type=\"url\" name=\"src-url\"\r\n                        onChange={this.handleURLInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.BuiltIn:\r\n                let subList = Object.keys(BUILT_INS).map(k => {\r\n                    return (<option value={k} key={k}>{k}</option>);\r\n                });\r\n                subSelector = (\r\n                    <select name=\"src-builtin\" value={this.state.selectedBuiltIn}\r\n                        onChange={this.handleBuiltInChange}>\r\n                        {subList}\r\n                    </select>\r\n                    );\r\n                break;\r\n            default:\r\n                subSelector = (<div>unknown source type {this.state.selectedType}</div>);\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"source-select\">\r\n                <div className=\"source-select-type\">\r\n                    <select value={this.state.selectedType} onChange={this.handleSourceTypeChange}>\r\n                        {typeList}\r\n                    </select>\r\n                </div>\r\n                <div className=\"source-select-sub\">\r\n                    {subSelector}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SourceSelector;\r\n","import * as React from 'react';\r\nimport EffectLayer, {EffectType, ControlComponent} from './EffectLayer';\r\nimport SourceSelector from './SourceSelector';\r\n\r\nconst INCS = 100; // number of increments per (0,1) interval for slider\r\nconst MAX_SCALE = 5;\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface ImageControlState {\r\n    xoffset : number;\r\n    yoffset : number;\r\n    scale : number;\r\n    src?: string;\r\n    invert : boolean;\r\n}\r\n\r\nexport interface ImageControlHandlers {\r\n    onSliderChange: (name:string, value:number) => void;\r\n    onInvertChange: (value:boolean) => void;\r\n    onSourceChange: (url:string) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : ImageControlState,\r\n    handlers : ImageControlHandlers,\r\n\r\n    parentEffectType ?: EffectType;\r\n}\r\n\r\nclass ImageControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : ImageControls.getFreshState,\r\n            getHandlers : ImageControls.getHandlers,\r\n            getControlState : ImageControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : ImageControlState = {\r\n            xoffset : 0,\r\n            yoffset : 0,\r\n            scale : 1,\r\n            invert : false,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : ImageControlHandlers = {\r\n            onSliderChange: (name : string, value : number) => {\r\n                if (name === \"xoffset\") {\r\n                    el.setState({ xoffset:value });\r\n                }\r\n                else if (name === \"yoffset\") {\r\n                    el.setState({ yoffset:value });\r\n                }\r\n                else if (name === \"scale\") {\r\n                    el.setState({ scale:value});\r\n                }\r\n                else {\r\n                    console.log(\"ImageEffect: unknown slider change \" + name);\r\n                }\r\n            },\r\n\r\n            onInvertChange: (value: boolean) => {\r\n                el.setState({ invert:value });\r\n            },\r\n\r\n            onSourceChange: (url: string) => {\r\n                el.setState({ src:url });\r\n            }\r\n        }\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : ImageControlState = {\r\n            xoffset: el.state.xoffset,\r\n            yoffset: el.state.yoffset,\r\n            scale: el.state.scale,\r\n            src: el.state.src,\r\n            invert: el.state.invert,\r\n        }\r\n        return ctrl;\r\n    };\r\n\r\n    handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onSliderChange(event.target.name, parseFloat(event.target.value) / INCS);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onInvertChange(event.target.checked);\r\n    };\r\n\r\n    handleSourceChange = this.props.handlers.onSourceChange;\r\n\r\n    render() {\r\n        const xoffset_scaled = this.props.control.xoffset * INCS;\r\n        const yoffset_scaled = this.props.control.yoffset * INCS;\r\n        const scale_scaled = this.props.control.scale * INCS;\r\n        let invert_text : string = \"Invert\";\r\n        switch (this.props.parentEffectType) {\r\n            case EffectType.Image:\r\n                invert_text = \"Draw Behind\";\r\n                break;\r\n            case EffectType.Mask:\r\n                invert_text = \"Inverse Alpha\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                   <SourceSelector onSourceChange={this.handleSourceChange} parentEffectType={this.props.parentEffectType}/>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">{invert_text}</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.invert} onChange={this.handleCheckboxChange}/>\r\n                    </div>\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">X Offset</div>\r\n                        <input type=\"range\" name=\"xoffset\" value={xoffset_scaled} className=\"control\"\r\n                             min={-INCS} max={INCS} onChange={this.handleSliderChange}/>\r\n                    </div>\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Y Offset</div>\r\n                        <input type=\"range\" name=\"yoffset\" value={yoffset_scaled} className=\"control\"\r\n                             min={-INCS} max={INCS} onChange={this.handleSliderChange}/>\r\n                    </div>\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Scale</div>\r\n                        <input type=\"range\" name=\"scale\" value={scale_scaled} className=\"control\"\r\n                             min={1} max={INCS*MAX_SCALE} onChange={this.handleSliderChange}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageControls;\r\n","import {Effect, Sketcher} from './EffectLayer';\r\nimport ImageControls from './ImageControls';\r\n\r\nconst ALT_TEXT = \"load failed\\n\"\r\n                 + \"   (CORS not allowed?)\";\r\n\r\n// server that can apply the Access-Control-Allow-Origin header\r\nconst CORS_PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nvar ImageEffect : Effect = {\r\n    name : \"Image\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s : Sketcher) => {\r\n        s.internal.text = \"no image\";\r\n    },\r\n\r\n    preDraw : (s : Sketcher) => {\r\n        // if image src has changed, reload\r\n        if (s.state.src && s.state.src !== s.internal.src) {\r\n            s.internal.src = s.state.src;\r\n            s.internal.img = null;\r\n\r\n            let tmpsrc = s.state.src.trim();\r\n            // these functions don't support Promises yet :(\r\n            s.loadImage(tmpsrc, (img : p5.Image) => {\r\n                s.internal.img = img;\r\n            },\r\n            (err) => {\r\n                s.internal.text = ALT_TEXT;\r\n\r\n                if (CORS_PROXY_URL) {\r\n                    // if we failed to load, try to fetch image through a CORS-friendly proxy\r\n                    console.log(\"ImageEffect: load failed, attempting via proxy \" + CORS_PROXY_URL);\r\n                    s.loadImage(CORS_PROXY_URL + tmpsrc,\r\n                        (img : p5.Image) => {\r\n                            console.log(\"retreived image.\");\r\n                            s.internal.img = img;\r\n                        },\r\n                        (err) => {\r\n                            console.warn(\"CORS proxy failed.\");\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // clear canvas\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s : Sketcher) => {\r\n        if (!s.state.invert) {\r\n            // draw base pixels to canvas\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n\r\n        if (s.internal.img) {\r\n            // draw image\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n        }\r\n        else {\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset + \",\" + s.state.yoffset + \")\\n\" +\r\n                   \"   x \" + s.state.scale + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n\r\n        if (s.state.invert) {\r\n            // inverted. image drawn behind, now draw base in front\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n    },\r\n}\r\n\r\nexport default ImageEffect;\r\n","import {Effect, Sketcher} from './EffectLayer';\r\nimport ImageControls from './ImageControls';\r\nimport ImageEffect from './ImageEffect';\r\n\r\nvar MaskEffect : Effect = {\r\n    name : \"Mask\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher) => {\r\n        s.internal.mask = s.createImage(s.props.size, s.props.size);\r\n        s.internal.text = \"no mask\";\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n\r\n        // load mask like any other image\r\n        ImageEffect.preDraw(s);\r\n\r\n        // when loaded, try to draw on blank and re-save as mask matching image size\r\n        if (s.internal.img) {\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            // draw\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n\r\n            // copy into mask buffer\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.loadPixels();\r\n            s.internal.mask.loadPixels();\r\n            if (!s.state.invert) {\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.internal.mask.pixels[i] = s.pixels[i];\r\n                }\r\n            }\r\n            else {\r\n                // inverted; mask transparency flipped.\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.internal.mask.pixels[i] = 255 - s.pixels[i];\r\n                }\r\n            }\r\n            s.internal.mask.updatePixels();\r\n        }\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        if (s.internal.img) {\r\n            // apply mask to base pixels\r\n            s.baseImg.mask(s.internal.mask);\r\n\r\n            // draw to canvas\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n        else {\r\n            s.image(s.baseImg, 0, 0);\r\n\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset + \",\" + s.state.yoffset + \")\\n\" +\r\n                   \"   x \" + s.state.scale + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n    },\r\n};\r\n\r\nexport default MaskEffect;\r\n","import * as React from 'react';\r\nimport EffectLayer, {ControlComponent} from './EffectLayer';\r\nimport {getUserInstanceName} from './CodeEffect';\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface CodeControlState {\r\n    codeText : string;\r\n    errorText : string;\r\n    shouldEval : boolean;\r\n}\r\n\r\nexport interface CodeControlHandlers {\r\n    onCodeChange       : (code : string) => void;\r\n    onShouldEvalChange : (should : boolean) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : CodeControlState,\r\n    handlers : CodeControlHandlers,\r\n}\r\n\r\nclass CodeControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : CodeControls.getFreshState,\r\n            getHandlers : CodeControls.getHandlers,\r\n            getControlState : CodeControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : CodeControlState = {\r\n            codeText : \"\",\r\n            errorText : \"[-------------]\",\r\n            shouldEval : false,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : CodeControlHandlers = {\r\n            onCodeChange: (code: string) => {\r\n                el.setState({ codeText: code });\r\n            },\r\n\r\n            onShouldEvalChange: (should : boolean) => {\r\n                el.setState({ shouldEval: should });\r\n            },\r\n        };\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : CodeControlState = {\r\n            codeText : el.state.codeText,\r\n            errorText: el.state.errorText,\r\n            shouldEval: el.state.shouldEval,\r\n        };\r\n        return ctrl;\r\n    };\r\n\r\n    handleTextFieldChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        this.props.handlers.onCodeChange(event.target.value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onShouldEvalChange(event.target.checked);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Run</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.shouldEval} onChange={this.handleCheckboxChange}/>\r\n                    </div>\r\n                    <div className=\"controls-bar controls-info\"> instance name: `{getUserInstanceName()}`</div>\r\n                    <div className=\"controls-bar controls-info\"> {this.props.control.errorText} </div>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <div className=\"controls-area\">\r\n                        <textarea className=\"code-area\"\r\n                                value={this.props.control.codeText}\r\n                                onChange={this.handleTextFieldChange}></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeControls;\r\n","import EffectLayer, {Effect, Sketcher} from './EffectLayer';\r\nimport CodeControls from './CodeControls';\r\n\r\n// Paint Effect.\r\n// Allows user to input p5 commands to draw, or choose from some presets.\r\n// Dangerous evals? probably.\r\n\r\n// time-out for code execution\r\nconst TIME_LIMIT_MS : number = 500;\r\nconst USER_CODE_INSTANCE_NAME : string = \"pfive\";\r\n\r\nexport function getUserInstanceName() {\r\n    return USER_CODE_INSTANCE_NAME;\r\n}\r\n\r\ninterface SketchWrapper {\r\n    timeExpired: boolean;\r\n    timerHandle: number;\r\n    proxy : any;\r\n}\r\n\r\nfunction getP5InstanceWrapper(instance: p5) : SketchWrapper {\r\n    let wrapper : SketchWrapper = {\r\n        timeExpired: false,\r\n        timerHandle: 0,\r\n        proxy: undefined,\r\n    };\r\n    wrapper.timerHandle = window.setTimeout(\r\n        function(w : SketchWrapper) {\r\n            console.log(\"PaintEffect: Painting code execution time expired.\");\r\n            w.timeExpired = true;\r\n        }, TIME_LIMIT_MS, wrapper);\r\n    wrapper.proxy = new Proxy(instance,\r\n    {\r\n        get: function(target : any, property, receiver) {\r\n            if (wrapper.timeExpired) {\r\n                throw EvalError(\"Code execution time for painting expired (\" + TIME_LIMIT_MS + \" ms).\");\r\n            }\r\n            return target[property];\r\n        },\r\n    });\r\n    return wrapper;\r\n}\r\n\r\n// wrap the p5 instance.\r\n// before every p5 function call, check for timeout.\r\n// throws an error if so.\r\nfunction runInWrapper(__code__: string, __instance__: p5) {\r\n    let __wrapper__ = getP5InstanceWrapper(__instance__);\r\n    try {\r\n        // eval is dangerous.\r\n        // Instead, we could try interpreting each line as an individual p5 function call?\r\n        // It would make this much less powerful, but whatever;\r\n        // this isn't intended for complex drawing anyway.\r\n\r\n        // eslint-disable-next-line no-new-func\r\n        Function(USER_CODE_INSTANCE_NAME,\r\n            '\"use strict\";' +\r\n            '{;' + __code__ + ';}')(__wrapper__.proxy);\r\n    }\r\n    catch (err) {\r\n        window.clearTimeout(__wrapper__.timerHandle);\r\n        //console.log(\"PaintEffect: eval failed, throwing up error\");\r\n        throw err; // toss error up to be caught in draw()\r\n    }\r\n    return __wrapper__;\r\n}\r\n\r\nvar CodeEffect : Effect = {\r\n    name : \"Code\",\r\n    control : CodeControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => {\r\n        s.internal.oldCode = \"\";\r\n        s.internal.codeValid = false;\r\n\r\n        s.internal.handleError = function(errorString : string) {\r\n            layer.setState({ errorText : errorString });\r\n        };\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        // draw base pixels\r\n        s.image(s.baseImg, 0, 0);\r\n\r\n        // try to run user painting code\r\n        // only try run if valid already valid or code has changed\r\n        if (s.state.codeText !== s.internal.oldCode || s.internal.codeValid) {\r\n            // only run if we have code\r\n            if (s.state.shouldEval && s.state.codeText && s.state.codeText.length > 0) {\r\n                try {\r\n                    let wrapper = runInWrapper(s.state.codeText, s);\r\n                    window.clearTimeout(wrapper.timerHandle);\r\n                    s.internal.codeValid = true;\r\n                    s.internal.handleError(\"[no errors! :)]\");\r\n                }\r\n                catch (err) {\r\n                    s.internal.codeValid = false;\r\n                    s.internal.handleError(err.message);\r\n                }\r\n                s.internal.oldCode = s.state.codeText;\r\n            }\r\n            else {\r\n                s.internal.handleError(\"[-------------]\");\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport default CodeEffect;\r\n","import * as React from 'react';\r\nimport {Layer} from './LayerStack';\r\nimport ImageEffect from './ImageEffect';\r\nimport MaskEffect from './MaskEffect';\r\nimport CodeEffect from './CodeEffect';\r\nimport ImageControls from './ImageControls';\r\nimport CodeControls from './CodeControls';\r\n\r\nconst EFFECT_RENDERER = \"p2d\"; // \"webgl\" | \"p2d\" // webgl doesn't work very well yet\r\n\r\ninterface Props {\r\n    size : number;\r\n    ind : number;\r\n    type: EffectType;\r\n\r\n    callbackContainer: Layer;\r\n\r\n    onNewOutput: (eindex: number, pixels: Uint8ClampedArray) => void;\r\n    onRemove: (eindex: number) => void;\r\n    onMove: (eindex: number, diff: number) => number;\r\n\r\n    isFirst?: boolean;\r\n    isLast?: boolean;\r\n}\r\n\r\nexport interface ControlComponent {\r\n    getFreshState: ()=>any;\r\n    getHandlers: (el:EffectLayer)=>any;\r\n    getControlState: (el:EffectLayer)=>any;\r\n}\r\n\r\nexport interface Effect {\r\n    name : string;\r\n    control : ControlComponent; // ControlComponent, but static interfaces don't exist\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => void; // one-time initialization\r\n    preDraw : (s:Sketcher) => void; // prepare to draw; usually clear canvas\r\n    draw : (s:Sketcher) => void;    // draw the effect to the canvas\r\n}\r\n\r\ninterface State {\r\n    [x:string]: any; // lifted state from inner components\r\n    basepixels?: Uint8ClampedArray; // (size * size * 4) length\r\n}\r\n\r\nexport enum EffectType {\r\n    Image = \"image\",\r\n    Mask = \"mask\",\r\n    Code = \"code\",\r\n}\r\n\r\nfunction getEffect(et : EffectType) {\r\n    switch (et) {\r\n        case EffectType.Image:\r\n            return ImageEffect;\r\n        case EffectType.Mask:\r\n            return MaskEffect;\r\n        case EffectType.Code:\r\n            return CodeEffect;\r\n        default:\r\n            console.warn(\"tried to get unknown effect \" + et + \": defaulting to ImageEffect\");\r\n            return ImageEffect;\r\n    }\r\n}\r\n\r\nexport interface Sketcher extends p5 {\r\n    props : Props;\r\n    state : State;\r\n    internal : any;\r\n    baseImg: p5.Image;\r\n}\r\n\r\nfunction getSketcher(parent : EffectLayer, effect : Effect) {\r\n    let sketcher = function (s : Sketcher) {\r\n        s.props = parent.props;\r\n        s.state = parent.state;\r\n        s.internal = {}; // for use by effect\r\n\r\n        s.preload = function() {\r\n            s.baseImg = s.createImage(s.props.size, s.props.size);\r\n\r\n            // one-time effect initialization\r\n            effect.preLoad(s, parent);\r\n        }\r\n\r\n        s.setup = function() {\r\n            s.pixelDensity(1);\r\n            s.createCanvas(s.props.size, s.props.size, EFFECT_RENDERER);\r\n        }\r\n\r\n        function preDraw() {\r\n            // re-fetch state.\r\n            s.state = parent.state;\r\n\r\n            // apply base pixels from previous layer to buffer image\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.baseImg.loadPixels();\r\n            if (s.state.basepixels) {\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = s.state.basepixels[i];\r\n                }\r\n            }\r\n            else {\r\n                // zero out base image;\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = 0;\r\n                }\r\n            }\r\n            s.baseImg.updatePixels();\r\n\r\n            // prepare to draw this frame\r\n            effect.preDraw(s);\r\n        }\r\n\r\n        s.draw = function() {\r\n            preDraw();\r\n\r\n            // draw this frame\r\n            effect.draw(s);\r\n\r\n            // inform that new pixels are created\r\n            s.loadPixels();\r\n            parent.onOutput(Uint8ClampedArray.from(s.pixels));\r\n        }\r\n    };\r\n    return sketcher;\r\n}\r\n\r\nfunction getDefaultFilename(el : EffectLayer) {\r\n    return \"token-\" + el.props.size + \"px.png\";\r\n}\r\n\r\nclass EffectLayer extends React.PureComponent<Props, State> {\r\n    EMPTY_BASE: Uint8ClampedArray;\r\n    canvas?: p5;\r\n    effect: Effect;\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.EMPTY_BASE = new Uint8ClampedArray(this.props.size * this.props.size * 4);\r\n        this.props.callbackContainer.onNewBasePixels = this.handleBasePixelsChanged;\r\n        this.effect = getEffect(this.props.type);\r\n        this.state = {\r\n            ...this.effect.control.getFreshState(),\r\n        };\r\n        this.canvas = undefined;\r\n    }\r\n\r\n    handleBasePixelsChanged = (pixels?: Uint8ClampedArray | null) => {\r\n        if (pixels) {\r\n            this.setState({ basepixels: pixels });\r\n        }\r\n        else {\r\n            //console.log(\"EffectLayer: no base pixels\");\r\n            this.setState({ basepixels: this.EMPTY_BASE });\r\n        }\r\n    }\r\n\r\n    handleRemoveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onRemove) {\r\n            this.props.onRemove(this.props.ind);\r\n        }\r\n    }\r\n\r\n    handleSaveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.canvas) {\r\n            this.canvas.saveCanvas(getDefaultFilename(this));\r\n        }\r\n    }\r\n\r\n    handleMoveUpPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onMove) {\r\n            this.props.onMove(this.props.ind, 1);\r\n        }\r\n    }\r\n\r\n    handleMoveDownPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onMove) {\r\n            this.props.onMove(this.props.ind, -1);\r\n        }\r\n    }\r\n\r\n    onOutput = (pixels : Uint8ClampedArray) => {\r\n        // always emit, since it's difficult to tell when the next\r\n        // will need an update, even when we've not had a difference.\r\n        this.props.onNewOutput(this.props.ind, pixels);\r\n        return;\r\n    }\r\n\r\n    getCanvasID = () => {\r\n        return \"image-canvas-\" + this.props.callbackContainer.key;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = new window.p5(getSketcher(this, this.effect), document.getElementById(this.getCanvasID()) as HTMLElement);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log(\"EffectLayer: unmounting\");\r\n        if (this.canvas) {\r\n            this.canvas.remove();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let controls = <div className=\"controls\"></div>;\r\n        switch (this.props.type) {\r\n            case EffectType.Image:\r\n            case EffectType.Mask:\r\n                controls = (\r\n                    <ImageControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)} parentEffectType={this.props.type}/>\r\n                    );\r\n                break;\r\n            case EffectType.Code:\r\n                controls = (\r\n                    <CodeControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            default:\r\n                console.error(\"EffectLayer: can't render controls for unknown effect type\");\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"effect-container\" id={\"effect-container\"+this.props.callbackContainer.key}>\r\n                <div className=\"effect-title\">\r\n                    <button className=\"effect-move-up\"\r\n                        onClick={this.handleMoveUpPressed}\r\n                        disabled={this.props.isLast}>▲</button>\r\n                    <hr/>\r\n                    <div>[{this.props.ind + 1}] {this.effect.name}</div>\r\n                    <button className=\"effect-save-button\"\r\n                        onClick={this.handleSaveButtonPressed}>save</button>\r\n                    <button className=\"effect-remove-button\"\r\n                        onClick={this.handleRemoveButtonPressed}>remove</button>\r\n                    <hr/>\r\n                    <button className=\"effect-move-down\"\r\n                        onClick={this.handleMoveDownPressed}\r\n                        disabled={this.props.isFirst}>▼</button>\r\n                </div>\r\n                <div className=\"effect-canvas\">\r\n                    <div className=\"canvas-container\" id={this.getCanvasID()}></div>\r\n                </div>\r\n                {controls}\r\n            </div>\r\n        );\r\n    }\r\n    // xoffset={this.state.xoffset} yoffset={this.state.yoffset} scale={this.state.scale}\r\n}\r\n\r\nexport default EffectLayer;\r\n","import * as React from 'react';\r\nimport {EffectType} from './EffectLayer';\r\n\r\nexport interface Props {\r\n    onAdd : (et : EffectType) => void;\r\n}\r\n\r\ninterface State {\r\n    selected : EffectType;\r\n}\r\n\r\nclass LayerAdder extends React.Component<Props, State> {\r\n    effects : Array<EffectType>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.effects = [];\r\n        for (let e in EffectType) {\r\n            this.effects.push(EffectType[e] as EffectType);\r\n        }\r\n        this.state = {selected:this.effects[0]};\r\n    }\r\n\r\n    handleSelection = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        let i : number;\r\n        for (i = 0; i < this.effects.length; i++) {\r\n            if (this.effects[i] === event.target.value) {\r\n                this.setState({ selected : this.effects[i] });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAdd = () => {\r\n        this.props.onAdd(this.state.selected);\r\n    }\r\n\r\n    render() {\r\n        const effectList = this.effects.map((effect) => \r\n                <option value={effect} key={effect}>{effect}</option>\r\n            );\r\n        return (\r\n            <div>\r\n                <div>effects?</div>\r\n                <select value={this.state.selected} onChange={this.handleSelection}>\r\n                    {effectList}\r\n                </select>\r\n                <button onClick={this.handleAdd}>add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LayerAdder;\r\n","import * as React from 'react';\r\nimport LayerAdder from './LayerAdder';\r\nimport EffectLayer from './EffectLayer';\r\nimport {EffectType} from './EffectLayer';\r\n\r\nexport interface Layer {\r\n    type : EffectType;\r\n    key : number;\r\n    onNewBasePixels: (pixels?: Uint8ClampedArray) => void; // empty until an EffectLayer constructor supplies it\r\n}\r\n\r\ninterface Props {\r\n    canvasSize : number;\r\n}\r\n\r\ninterface State {\r\n    layers : Array<Layer>;\r\n}\r\n\r\nclass LayerStack extends React.Component<Props,State> {\r\n    freeKey : number = 0;\r\n    results : Array<Uint8ClampedArray> = [];\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = { layers : [] };\r\n    }\r\n\r\n    newLayer = (et : EffectType) => {\r\n        const newLayers = this.state.layers.concat({ \r\n                type:et,\r\n                key:this.freeKey,\r\n                onNewBasePixels:()=>{},\r\n            });\r\n        this.freeKey++;\r\n        this.results.push(new Uint8ClampedArray(this.props.canvasSize * this.props.canvasSize * 4));\r\n        this.setState({ layers : newLayers });\r\n    };\r\n\r\n    handleNewOutput = (effectIndex : number, pixels : Uint8ClampedArray) => {\r\n        this.results[effectIndex] = pixels;\r\n        if (effectIndex < this.state.layers.length - 1) {\r\n          this.state.layers[effectIndex+1].onNewBasePixels(pixels);\r\n        }\r\n        return;\r\n    };\r\n\r\n    handleAddEffect = (et : EffectType) => {\r\n        this.newLayer(et);\r\n    };\r\n\r\n    handleRemoveEffect = (effectIndex : number) => {\r\n        if (effectIndex < 0 || effectIndex >= this.state.layers.length) {\r\n          console.error(\"can't remove effect at bad index \" + effectIndex);\r\n          return;\r\n        }\r\n        if (effectIndex < this.state.layers.length - 1) {\r\n          if (effectIndex > 0) {\r\n            this.state.layers[effectIndex+1].onNewBasePixels(this.results[effectIndex-1]);\r\n          }\r\n          else {\r\n            this.state.layers[effectIndex+1].onNewBasePixels();\r\n          }\r\n        }\r\n        this.results.splice(effectIndex, 1);\r\n        const newLayers = this.state.layers.slice(0,effectIndex).concat(this.state.layers.slice(effectIndex+1));\r\n        this.setState({ layers : newLayers });\r\n        };\r\n\r\n        handleMoveEffect = (effectIndex : number, move : number) => {\r\n        let newIndex = effectIndex + move;\r\n        if ( newIndex < 0 || newIndex >= this.state.layers.length) {\r\n          console.error(\"can't move effect \" + effectIndex + \" to position \" + newIndex);\r\n        }\r\n        const newLayers = this.state.layers.slice();\r\n        let removed = newLayers.splice(effectIndex, 1)[0];\r\n        newLayers.splice(newIndex, 0, removed);\r\n\r\n        this.setState({ layers : newLayers });\r\n        return newIndex;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.newLayer(EffectType.Image);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.layers.length > 0) {\r\n            this.state.layers[0].onNewBasePixels();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const layerList = this.state.layers.map((layer, index) => \r\n            <EffectLayer key={layer.key} type={layer.type} size={this.props.canvasSize} ind={index}\r\n                callbackContainer={layer}\r\n                onNewOutput={this.handleNewOutput}\r\n                onRemove={this.handleRemoveEffect}\r\n                onMove={this.handleMoveEffect}\r\n                isFirst={(index === 0)}\r\n                isLast={(index === this.state.layers.length-1)}/>\r\n          );\r\n        return (\r\n            <div key={this.props.canvasSize} className=\"layer-stack\">\r\n                <hr/>\r\n                    <LayerAdder onAdd={this.handleAddEffect}/>\r\n                <hr/>\r\n                <div className=\"list-container\">\r\n                <div className=\"list-side-spacer\"></div>\r\n                <div className=\"effect-list\">\r\n                    {layerList}\r\n                </div>\r\n                <div className=\"list-side-spacer\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default LayerStack;\r\n","import * as React from 'react';\r\nimport {DEFAULT_CANVAS_SIZE, MAX_CANVAS_SIZE} from '../App'\r\n\r\ninterface Props {\r\n    onSizeChange : (newSize : number) => void;\r\n}\r\n\r\ninterface State {\r\n    inputCanvasSize : string;\r\n}\r\n\r\n//const BUILT_INS = [...Array.from(Array(10).keys()).filter((i) => i > 4), 100];\r\n\r\nclass SizeSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {\r\n            inputCanvasSize: DEFAULT_CANVAS_SIZE.toString(),\r\n        };\r\n    }\r\n\r\n    handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n        let sizeNum = parseInt(this.state.inputCanvasSize);\r\n        if (sizeNum) {\r\n            this.props.onSizeChange(sizeNum);\r\n        }\r\n        event.preventDefault();\r\n    };\r\n\r\n    handleInputChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ inputCanvasSize: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"size-selector\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                <input type=\"number\" min={1} max={MAX_CANVAS_SIZE} value={this.state.inputCanvasSize}\r\n                    onChange={this.handleInputChanged}/>\r\n                <input type=\"submit\" value=\"apply\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SizeSelector;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LayerStack from './components/LayerStack';\r\nimport SizeSelector from './components/SizeSelector';\r\n\r\nexport const DEFAULT_CANVAS_SIZE = Math.pow(2, 8); // 256\r\nexport const MAX_CANVAS_SIZE = Math.pow(2, 10);    // 1024\r\n\r\ninterface State {\r\n    canvasSize : number;\r\n}\r\n\r\nclass App extends React.Component<any,State> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = { canvasSize : DEFAULT_CANVAS_SIZE };\r\n    }\r\n\r\n    handleSizeChange = (newSize : number) => {\r\n        if (newSize > 0 && newSize <= MAX_CANVAS_SIZE) {\r\n            this.setState({canvasSize : newSize});\r\n        }\r\n        else {\r\n            console.error(\"Canvas size of \" + newSize + \" is not supported (max \" + MAX_CANVAS_SIZE + \").\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Token Clipper</h1>\r\n                <SizeSelector onSizeChange={this.handleSizeChange}/>\r\n                <LayerStack canvasSize={this.state.canvasSize}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}