{"version":3,"sources":["components/SourceSelector.tsx","components/ControlSlider.tsx","components/ImageControls.tsx","effects/ImageEffect.tsx","effects/MaskEffect.tsx","components/CodeControls.tsx","effects/CodeEffect.tsx","components/MatrixTable.tsx","effects/Effect.tsx","components/TransformControls.tsx","effects/TransformEffect.tsx","components/LayerAdder.tsx","components/EffectLayer.tsx","components/LayerStack.tsx","components/SizeSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SourceType","BUILT_INS","Yuratzu of Pain (167 x 173px)","Mask Circle (radius 128px)","Mask Square (side 256px)","SourceSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleURLInputChange","event","target","value","length","onSourceChange","URL","toString","err","console","log","handleFileInputChange","files","createObjectURL","error","handleBuiltInChange","setState","selectedBuiltIn","handleSourceTypeChange","selectedType","BuiltIn","state","st","sbi","keys","parentEffectType","EffectType","Mask","Image","LocalFile","subSelector","typeList","map","k","t","react","key","s","prettySource","type","accept","name","onChange","subList","className","React","INCS","BLEND_MODE","ControlSlider","onValueChange","valMin","valMax","scaled_value","min","max","units_div","units","label","toFixed","scaledValue","parseFloat","ImageControls","handleSliderChange","handlers","onSliderChange","handleCheckboxChange","onInvertChange","checked","handleSourceChange","handleBlendModeChange","onBlendModeChange","handleResetPress","invert_text","blend_options","blend_select","control","blendMode","components_SourceSelector","invert","components_ControlSlider","xoffset","yoffset","scale","onClick","el","url","src","mode","getFreshState","getHandlers","getControlState","CORS_PROXY_URL","ImageEffect","controlFuncs","preLoad","internal","text","preDraw","img","tmpsrc","trim","loadImage","warn","BLEND","clear","draw","firstImg","baseImg","secondImg","drawImg","imgw","width","imgh","height","image","size","badMode","textSize","mouseDragged","mev","layer","move","extractPointerMove","mouseWheel","wev","delt","delta","deltaY","makeScrollSane","MaskEffect","mask","createImage","psize","loadPixels","i","pixels","updatePixels","CodeControls","handleTextFieldChange","onCodeChange","onShouldEvalChange","shouldEval","USER_CODE_INSTANCE_NAME","errorText","codeText","code","should","TIME_LIMIT_MS","runInWrapper","__code__","__instance__","__wrapper__","instance","wrapper","timeExpired","timerHandle","proxy","undefined","window","setTimeout","w","Proxy","get","property","receiver","EvalError","getP5InstanceWrapper","Function","clearTimeout","CodeEffect","oldCode","codeValid","handleError","errorString","message","handleCellChange","ind","onMatrixChange","MatrixTable","values","rows","cols","MatrixRow","row","tds","Array","from","col","labels","showInput","MatrixCell","trs","TransformControls","onUseMatrixChange","handleMatrixChange","val","newMatrix","matrix","newView","viewMatrix","onViewMatrixChange","onInputMatrixChange","handleResetPressed","bottom_controls","viewValues","concat","v","useMatrix","components_MatrixTable","translateX","translateY","scaleX","scaleY","shearX","Math","PI","shearY","rotate","TransformEffect","resetMatrix","mat","applyMatrix","translate","deltaX","altKey","SCROLL_SANITY_BOUND","scrollScale","log10","movementX","movementY","mouseX","mouseY","pmouseX","pmouseY","LayerAdder","e","effects","handleSelection","selected","handleAdd","onAdd","push","effectList","effect","EFFECT_RENDERER","getSketcher","parent","mouseInBounds","preload","setup","pixelDensity","createCanvas","basepixels","onOutput","Uint8ClampedArray","preventDefault","EffectLayer","EMPTY_BASE","canvas","handleBasePixelsChanged","handleRemoveButtonPressed","onRemove","handleSaveButtonPressed","saveCanvas","assertThisInitialized","handleMoveUpPressed","onMove","handleMoveDownPressed","onNewOutput","getCanvasID","callbackContainer","onNewBasePixels","et","Code","Transform","getEffect","objectSpread","p5","document","getElementById","remove","controls","components_ImageControls","components_CodeControls","components_TransformControls","id","disabled","isLast","isFirst","LayerStack","freeKey","results","newLayer","newLayers","layers","canvasSize","handleNewOutput","effectIndex","handleAddEffect","handleRemoveEffect","splice","slice","handleMoveEffect","newIndex","removed","_this2","layerList","index","components_EffectLayer","components_LayerAdder","SizeSelector","handleSubmit","sizeNum","parseInt","inputCanvasSize","onSizeChange","handleInputChanged","DEFAULT_CANVAS_SIZE","onSubmit","MAX_CANVAS_SIZE","pow","App","handleSizeChange","newSize","react_default","a","createElement","components_SizeSelector","components_LayerStack","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.824a288d.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {EffectType} from '../effects/Effect';\r\n\r\nenum SourceType {\r\n    BuiltIn = \"built-in\",\r\n    LocalFile = \"local-file\",\r\n    URL = \"url\",\r\n}\r\n\r\ninterface Props {\r\n    onSourceChange : (url:string) => void;\r\n    parentEffectType ?: EffectType;\r\n}\r\n\r\ninterface State {\r\n    selectedType : SourceType;\r\n    selectedBuiltIn : string;\r\n}\r\n\r\nfunction prettySource(s : SourceType): string {\r\n    switch (s) {\r\n        case SourceType.BuiltIn:\r\n            return \"Built-in\";\r\n        case SourceType.LocalFile:\r\n            return \"Local file\";\r\n        case SourceType.URL:\r\n            return \"URL\";\r\n        default:\r\n            return \"unknown source type\";\r\n    }\r\n}\r\n\r\ninterface BuiltIns {\r\n    [x:string] : string;\r\n}\r\n\r\nconst BUILT_INS : BuiltIns = {\r\n    \"Yuratzu of Pain (167 x 173px)\" : \"assets/yuratzu.png\",\r\n    \"Mask Circle (radius 128px)\"    : \"assets/circle-alpha-512.png\",\r\n    \"Mask Square (side 256px)\"      : \"assets/square-alpha-512.png\",\r\n};\r\n\r\nclass SourceSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        let st  = SourceType.BuiltIn;\r\n        let sbi = Object.keys(BUILT_INS)[0];\r\n\r\n        switch (this.props.parentEffectType) {\r\n            case EffectType.Mask:\r\n                st  = SourceType.BuiltIn;\r\n                sbi = Object.keys(BUILT_INS)[1]; // circle mask\r\n                break;\r\n            case EffectType.Image:\r\n                st  = SourceType.LocalFile;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.state = {\r\n            selectedType: st,\r\n            selectedBuiltIn : sbi,\r\n        };\r\n    }\r\n\r\n    handleURLInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value && event.target.value.length > 0) {\r\n            try {\r\n                this.props.onSourceChange((new URL(event.target.value)).toString());\r\n            }\r\n            catch (err){\r\n                console.log(\"SourceSelector: could not interpret URL\");\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFileInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files != null && event.target.files.length > 0) {\r\n            this.props.onSourceChange(URL.createObjectURL(event.target.files[0]));\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: file invalid\");\r\n        }\r\n    }\r\n\r\n    handleBuiltInChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (event.target.value in BUILT_INS) {\r\n            this.setState({selectedBuiltIn : event.target.value});\r\n            this.props.onSourceChange(BUILT_INS[event.target.value]);\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: built-in doesn't exist: \" + event.target.value);\r\n        }\r\n    };\r\n\r\n    handleSourceTypeChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({selectedType:event.target.value as SourceType});\r\n        if (event.target.value === SourceType.BuiltIn) {\r\n            // load selected built-in immediately\r\n            this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n        }\r\n        else {\r\n            // clear source selection\r\n            this.props.onSourceChange(\"\");\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        switch (this.state.selectedType) {\r\n            case SourceType.BuiltIn:\r\n                // if default builtin, notify to load\r\n                this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const typeList = Object.keys(SourceType).map(k => {\r\n                let t = SourceType[k as any];\r\n                return (<option value={t} key={t}>{prettySource(t as SourceType)}</option>);\r\n            });\r\n\r\n        let subSelector;\r\n        switch (this.state.selectedType) {\r\n            case SourceType.LocalFile:\r\n                subSelector = (\r\n                    <input type=\"file\" accept=\"image/*\" name=\"src-file\"\r\n                        onChange={this.handleFileInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.URL:\r\n                subSelector = (\r\n                    <input type=\"url\" name=\"src-url\"\r\n                        onChange={this.handleURLInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.BuiltIn:\r\n                let subList = Object.keys(BUILT_INS).map(k => {\r\n                    return (<option value={k} key={k}>{k}</option>);\r\n                });\r\n                subSelector = (\r\n                    <select name=\"src-builtin\" value={this.state.selectedBuiltIn}\r\n                        onChange={this.handleBuiltInChange}>\r\n                        {subList}\r\n                    </select>\r\n                    );\r\n                break;\r\n            default:\r\n                subSelector = (<div>unknown source type {this.state.selectedType}</div>);\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"source-select\">\r\n                <div className=\"source-select-type\">\r\n                    <select value={this.state.selectedType} onChange={this.handleSourceTypeChange}>\r\n                        {typeList}\r\n                    </select>\r\n                </div>\r\n                <div className=\"source-select-sub\">\r\n                    {subSelector}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SourceSelector;\r\n","import * as React from 'react';\r\n\r\nconst INCS = 200;  // number of increments for slider\r\n\r\ninterface SliderProps {\r\n    label: string;\r\n    name: string;\r\n    value: number;\r\n    onChange: (s: string, v: number) => void;\r\n\r\n    max: number;\r\n    min: number;\r\n    units?: string;\r\n}\r\n\r\nfunction handleIncrementChange( \r\n        onValueChange : (s: string, v: number) => void,\r\n        valMin:number, valMax:number) {\r\n    return function(event : React.ChangeEvent<HTMLInputElement>) {\r\n        let scaledValue = valMin + (parseFloat(event.target.value) / INCS * (valMax - valMin));\r\n        return onValueChange(event.target.name, scaledValue);\r\n    };\r\n}\r\n\r\nconst ControlSlider: React.FC<SliderProps> = (props:SliderProps) => {\r\n    let scaled_value = INCS * (props.value - props.min) / (props.max - props.min);\r\n    let units_div = (null);\r\n    if (props.units) {\r\n        units_div = <div className=\"controls-units\">{props.units ? props.units : \"\"}</div>;\r\n    }\r\n    return (\r\n        <label className=\"controls-bar\">\r\n            <div className=\"controls-label\">{props.label}</div>\r\n            <div className=\"controls-label\">{props.value.toFixed(2)}</div>\r\n            {units_div}\r\n            <input type=\"range\" name={props.name} value={scaled_value} className=\"control\"\r\n                min={0} max={INCS} onChange={handleIncrementChange(props.onChange, props.min, props.max)}/>\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default ControlSlider;\r\n","import * as React from 'react';\r\nimport EffectLayer from './EffectLayer';\r\nimport {EffectType, ControlComponent} from '../effects/Effect';\r\nimport SourceSelector from './SourceSelector';\r\nimport ControlSlider from './ControlSlider';\r\n\r\nconst MAX_SCALE = 5;\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface ImageControlState {\r\n    xoffset : number;\r\n    yoffset : number;\r\n    scale : number;\r\n\r\n    src?: string;\r\n    invert : boolean;\r\n    blendMode : p5.BLEND_MODE;\r\n}\r\n\r\nexport interface ImageControlHandlers {\r\n    onSliderChange: (name:string, value:number) => void;\r\n    onInvertChange: (value:boolean) => void;\r\n    onSourceChange: (url:string) => void;\r\n    onBlendModeChange: (mode:p5.BLEND_MODE) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : ImageControlState,\r\n    handlers : ImageControlHandlers,\r\n\r\n    parentEffectType ?: EffectType;\r\n}\r\n\r\nenum BLEND_MODE {\r\n    BLEND = \"source-over\",\r\n    //DARKEST = \"darkest\", // not recognized\r\n    LIGHTEST = \"lighten\",\r\n    DIFFERENCE = \"difference\",\r\n    MULTIPLY = \"multiply\",\r\n    EXCLUSION = \"exclusion\",\r\n    SCREEN = \"screen\",\r\n    REPLACE = \"copy\",\r\n    OVERLAY = \"overlay\",\r\n    HARD_LIGHT = \"hard-light\",\r\n    SOFT_LIGHT = \"soft-light\",\r\n    DODGE = \"color-dodge\",\r\n    BURN = \"color-burn\",\r\n    ADD = \"lighter\",\r\n}\r\n\r\nclass ImageControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : ImageControls.getFreshState,\r\n            getHandlers : ImageControls.getHandlers,\r\n            getControlState : ImageControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : ImageControlState = {\r\n            xoffset : 0,\r\n            yoffset : 0,\r\n            scale : 1,\r\n\r\n            invert : false,\r\n            blendMode : \"source-over\", // BLEND\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : ImageControlHandlers = {\r\n            onSliderChange: (name : string, value : number) => {\r\n                if (name === \"xoffset\") {\r\n                    el.setState({ xoffset:value });\r\n                }\r\n                else if (name === \"yoffset\") {\r\n                    el.setState({ yoffset:value });\r\n                }\r\n                else if (name === \"scale\") {\r\n                    el.setState({ scale:value});\r\n                }\r\n                else {\r\n                    console.log(\"ImageEffect: unknown slider change \" + name);\r\n                }\r\n            },\r\n\r\n            onInvertChange: (value: boolean) => {\r\n                el.setState({ invert:value });\r\n            },\r\n\r\n            onSourceChange: (url: string) => {\r\n                el.setState({ src:url });\r\n            },\r\n\r\n            onBlendModeChange: (mode: p5.BLEND_MODE) => {\r\n                el.setState({ blendMode:mode });\r\n            },\r\n        }\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : ImageControlState = {\r\n            xoffset: el.state.xoffset,\r\n            yoffset: el.state.yoffset,\r\n            scale: el.state.scale,\r\n\r\n            src: el.state.src,\r\n            invert: el.state.invert,\r\n            blendMode: el.state.blendMode,\r\n        }\r\n        return ctrl;\r\n    };\r\n\r\n    handleSliderChange = (name : string, value : number) => {\r\n        this.props.handlers.onSliderChange(name, value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onInvertChange(event.target.checked);\r\n    };\r\n\r\n    handleSourceChange = this.props.handlers.onSourceChange;\r\n\r\n    handleBlendModeChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.props.handlers.onBlendModeChange(event.target.value as p5.BLEND_MODE);\r\n    }\r\n\r\n    handleResetPress = () => {\r\n        this.props.handlers.onSliderChange(\"xoffset\", 0);\r\n        this.props.handlers.onSliderChange(\"yoffset\", 0);\r\n        this.props.handlers.onSliderChange(\"scale\", 1);\r\n    };\r\n\r\n    render() {\r\n        let invert_text : string = \"Invert\";\r\n        switch (this.props.parentEffectType) {\r\n            case EffectType.Image:\r\n                invert_text = \"Draw Behind\";\r\n                break;\r\n            case EffectType.Mask:\r\n                invert_text = \"Inverse Alpha\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let blend_options = Object.keys(BLEND_MODE).map(k => {\r\n            let t = BLEND_MODE[k as any];\r\n            return (<option value={t} key={k}>{k}</option>);\r\n        });\r\n\r\n        let blend_select = (null);\r\n        if (this.props.parentEffectType === EffectType.Image) {\r\n            blend_select = (<label className=\"controls-bar\">\r\n               <div className=\"controls-label\">Blend Mode</div>\r\n               <select className=\"controls-select\" value={this.props.control.blendMode}\r\n                   onChange={this.handleBlendModeChange}>\r\n                   {blend_options}\r\n               </select>\r\n            </label>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                   <SourceSelector onSourceChange={this.handleSourceChange} parentEffectType={this.props.parentEffectType}/>\r\n                   {blend_select}\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <label className=\"controls-bar\">\r\n                        <div className=\"controls-label\">{invert_text}</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.invert} onChange={this.handleCheckboxChange}/>\r\n                    </label>\r\n                    <ControlSlider label=\"X offset\" name=\"xoffset\" value={this.props.control.xoffset}\r\n                        onChange={this.handleSliderChange} min={-1} max={1} units=\"x\"/>\r\n                    <ControlSlider label=\"Y offset\" name=\"yoffset\" value={this.props.control.yoffset}\r\n                        onChange={this.handleSliderChange} min={-1} max={1} units=\"x\"/>\r\n                    <ControlSlider label=\"Scale\" name=\"scale\" value={this.props.control.scale}\r\n                        onChange={this.handleSliderChange} min={0.0001} max={MAX_SCALE} units=\"x\"/>\r\n                    <button onClick={this.handleResetPress}>Reset</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageControls;\r\n","import {Effect, makeScrollSane, extractPointerMove} from './Effect';\r\nimport EffectLayer, {Sketcher} from '../components/EffectLayer';\r\nimport ImageControls from '../components/ImageControls';\r\n\r\nconst ALT_TEXT = \"load failed\\n\"\r\n                 + \"   (CORS not allowed?)\";\r\n\r\n// server that can apply the Access-Control-Allow-Origin header\r\nconst CORS_PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nconst ZOOM_SCROLL_SPEED = 0.05;\r\n\r\n// Image Effect.\r\n// Draws an image to the canvas.\r\nvar ImageEffect : Effect = {\r\n    name : \"Image\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s : Sketcher) => {\r\n        s.internal.text = \"no image\";\r\n    },\r\n\r\n    preDraw : (s : Sketcher) => {\r\n        // if image src has changed, reload\r\n        if (s.state.src && s.state.src !== s.internal.src) {\r\n            s.internal.src = s.state.src;\r\n            s.internal.img = null;\r\n\r\n            let tmpsrc = s.state.src.trim();\r\n            // these functions don't support Promises yet :(\r\n            s.loadImage(tmpsrc, (img : p5.Image) => {\r\n                s.internal.img = img;\r\n            },\r\n            (err) => {\r\n                s.internal.text = ALT_TEXT;\r\n\r\n                if (CORS_PROXY_URL) {\r\n                    // if we failed to load, try to fetch image through a CORS-friendly proxy\r\n                    console.log(\"ImageEffect: load failed, attempting via proxy \" + CORS_PROXY_URL);\r\n                    s.loadImage(CORS_PROXY_URL + tmpsrc,\r\n                        (img : p5.Image) => {\r\n                            console.log(\"retreived image.\");\r\n                            s.internal.img = img;\r\n                        },\r\n                        (err) => {\r\n                            console.warn(\"CORS proxy failed.\");\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // set blend mode to default\r\n        s.blendMode(s.BLEND);\r\n\r\n        // clear canvas\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s : Sketcher) => {\r\n        if (s.internal.img) {\r\n            let firstImg = s.baseImg;\r\n            let secondImg = s.internal.img;\r\n\r\n            if (s.state.invert) {\r\n                firstImg = s.internal.img;\r\n                secondImg = s.baseImg;\r\n            }\r\n\r\n            let drawImg = (img: p5.Image) => {\r\n                // if the chosen image, apply scale.\r\n                if (img === s.internal.img) {\r\n                    let imgw = img.width, imgh = img.height;\r\n                    s.image(img,\r\n                        (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                        (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                        s.state.scale * imgw,\r\n                        s.state.scale * imgh);\r\n                }\r\n                else {\r\n                    // it's the base image.\r\n                    s.image(img, 0, 0);\r\n                }\r\n            };\r\n\r\n            drawImg(firstImg);\r\n\r\n            // set blend mode\r\n            if (s.state.blendMode && s.state.blendMode !== s.internal.badMode) {\r\n                try {\r\n                    s.blendMode(s.state.blendMode);\r\n                }\r\n                catch (err) {\r\n                    s.internal.badMode = s.state.blendMode\r\n                    console.error(\"Could not switch to blend mode \" + s.state.blendMode);\r\n                    console.error(err);\r\n                }\r\n            }\r\n\r\n            drawImg(secondImg);\r\n        }\r\n        else {\r\n            // draw base pixels\r\n            s.image(s.baseImg, 0, 0);\r\n\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset.toFixed(2) + \",\"\r\n                          + s.state.yoffset.toFixed(2) + \")\\n\" +\r\n                   \"   x \"  + s.state.scale.toFixed(2) + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n    },\r\n\r\n    mouseDragged : (s: Sketcher, mev: MouseEvent, layer:EffectLayer) => {\r\n        let move = extractPointerMove(s, mev);\r\n        if (move) {\r\n            layer.setState({\r\n                xoffset: s.state.xoffset + move[0] / s.props.size,\r\n                yoffset: s.state.yoffset + move[1] / s.props.size,\r\n            });\r\n        }\r\n        return;\r\n    },\r\n\r\n    mouseWheel : (s:Sketcher, wev:WheelEvent, layer:EffectLayer) => {\r\n        let delt = (wev as any).delta;\r\n        if (!delt) {\r\n            delt = wev.deltaY;\r\n        }\r\n        if (delt) {\r\n            layer.setState({\r\n                scale: s.state.scale - makeScrollSane(delt, ZOOM_SCROLL_SPEED),\r\n            });\r\n        }\r\n    },\r\n}\r\n\r\nexport default ImageEffect;\r\n","import {Effect} from './Effect';\r\nimport {Sketcher} from '../components/EffectLayer';\r\nimport ImageControls from '../components/ImageControls';\r\nimport ImageEffect from './ImageEffect';\r\n\r\nvar MaskEffect : Effect = {\r\n    name : \"Mask\",\r\n    control : ImageControls.controlFuncs,\r\n    mouseDragged : ImageEffect.mouseDragged,\r\n    mouseWheel : ImageEffect.mouseWheel,\r\n\r\n    preLoad : (s:Sketcher) => {\r\n        s.internal.mask = s.createImage(s.props.size, s.props.size);\r\n        s.internal.text = \"no mask\";\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n\r\n        // load mask like any other image\r\n        ImageEffect.preDraw(s);\r\n\r\n        // when loaded, try to draw on blank and re-save as mask matching image size\r\n        if (s.internal.img) {\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            // draw\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n\r\n            // copy into mask buffer\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.loadPixels();\r\n            s.internal.mask.loadPixels();\r\n            if (!s.state.invert) {\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.internal.mask.pixels[i] = s.pixels[i];\r\n                }\r\n            }\r\n            else {\r\n                // inverted; mask transparency flipped.\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.internal.mask.pixels[i] = 255 - s.pixels[i];\r\n                }\r\n            }\r\n            s.internal.mask.updatePixels();\r\n        }\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        if (s.internal.img) {\r\n            // apply mask to base pixels\r\n            s.baseImg.mask(s.internal.mask);\r\n\r\n            // draw to canvas\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n        else {\r\n            s.image(s.baseImg, 0, 0);\r\n\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset + \",\" + s.state.yoffset + \")\\n\" +\r\n                   \"   x \" + s.state.scale + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n    },\r\n};\r\n\r\nexport default MaskEffect;\r\n","import * as React from 'react';\r\nimport EffectLayer from './EffectLayer';\r\nimport {ControlComponent} from '../effects/Effect';\r\nimport {getUserInstanceName} from '../effects/CodeEffect';\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface CodeControlState {\r\n    codeText : string;\r\n    errorText : string;\r\n    shouldEval : boolean;\r\n}\r\n\r\nexport interface CodeControlHandlers {\r\n    onCodeChange       : (code : string) => void;\r\n    onShouldEvalChange : (should : boolean) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : CodeControlState,\r\n    handlers : CodeControlHandlers,\r\n}\r\n\r\nclass CodeControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : CodeControls.getFreshState,\r\n            getHandlers : CodeControls.getHandlers,\r\n            getControlState : CodeControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : CodeControlState = {\r\n            codeText : \"\",\r\n            errorText : \"[-------------]\",\r\n            shouldEval : false,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : CodeControlHandlers = {\r\n            onCodeChange: (code: string) => {\r\n                el.setState({ codeText: code });\r\n            },\r\n\r\n            onShouldEvalChange: (should : boolean) => {\r\n                el.setState({ shouldEval: should });\r\n            },\r\n        };\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : CodeControlState = {\r\n            codeText : el.state.codeText,\r\n            errorText: el.state.errorText,\r\n            shouldEval: el.state.shouldEval,\r\n        };\r\n        return ctrl;\r\n    };\r\n\r\n    handleTextFieldChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        this.props.handlers.onCodeChange(event.target.value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onShouldEvalChange(event.target.checked);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                    <label className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Run</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.shouldEval} onChange={this.handleCheckboxChange}/>\r\n                    </label>\r\n                    <div className=\"controls-bar controls-info\"> instance name: `{getUserInstanceName()}`</div>\r\n                    <div className=\"controls-bar controls-info\"> {this.props.control.errorText} </div>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <div className=\"controls-area\">\r\n                        <textarea className=\"code-area\"\r\n                                value={this.props.control.codeText}\r\n                                onChange={this.handleTextFieldChange}></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeControls;\r\n","import {Effect} from \"./Effect\";\r\nimport EffectLayer, {Sketcher} from '../components/EffectLayer';\r\nimport CodeControls from '../components/CodeControls';\r\n\r\n// time-out for code execution\r\nconst TIME_LIMIT_MS : number = 500;\r\nconst USER_CODE_INSTANCE_NAME : string = \"pfive\";\r\n\r\nexport function getUserInstanceName() {\r\n    return USER_CODE_INSTANCE_NAME;\r\n}\r\n\r\ninterface SketchWrapper {\r\n    timeExpired: boolean;\r\n    timerHandle: number;\r\n    proxy : any;\r\n}\r\n\r\nfunction getP5InstanceWrapper(instance: p5) : SketchWrapper {\r\n    let wrapper : SketchWrapper = {\r\n        timeExpired: false,\r\n        timerHandle: 0,\r\n        proxy: undefined,\r\n    };\r\n    wrapper.timerHandle = window.setTimeout(\r\n        function(w : SketchWrapper) {\r\n            console.log(\"PaintEffect: Painting code execution time expired.\");\r\n            w.timeExpired = true;\r\n        }, TIME_LIMIT_MS, wrapper);\r\n    wrapper.proxy = new Proxy(instance,\r\n    {\r\n        get: function(target : any, property, receiver) {\r\n            if (wrapper.timeExpired) {\r\n                throw EvalError(\"Code execution time for painting expired (\" + TIME_LIMIT_MS + \" ms).\");\r\n            }\r\n            return target[property];\r\n        },\r\n    });\r\n    return wrapper;\r\n}\r\n\r\n// wrap the p5 instance.\r\n// before every p5 function call, check for timeout.\r\n// throws an error if so.\r\nfunction runInWrapper(__code__: string, __instance__: p5) {\r\n    let __wrapper__ = getP5InstanceWrapper(__instance__);\r\n    try {\r\n        // eval is dangerous.\r\n        // Instead, we could try interpreting each line as an individual p5 function call?\r\n        // It would make this much less powerful, but whatever;\r\n        // this isn't intended for complex drawing anyway.\r\n\r\n        // eslint-disable-next-line no-new-func\r\n        Function(USER_CODE_INSTANCE_NAME,\r\n            '\"use strict\";' +\r\n            '{;' + __code__ + ';}')(__wrapper__.proxy);\r\n    }\r\n    catch (err) {\r\n        window.clearTimeout(__wrapper__.timerHandle);\r\n        //console.log(\"PaintEffect: eval failed, throwing up error\");\r\n        throw err; // toss error up to be caught in draw()\r\n    }\r\n    return __wrapper__;\r\n}\r\n\r\n// Code Effect.\r\n// Allows user to input p5 commands to draw.\r\nvar CodeEffect : Effect = {\r\n    name : \"Code\",\r\n    control : CodeControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => {\r\n        s.internal.oldCode = \"\";\r\n        s.internal.codeValid = false;\r\n\r\n        s.internal.handleError = function(errorString : string) {\r\n            layer.setState({ errorText : errorString });\r\n        };\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        // draw base pixels\r\n        s.image(s.baseImg, 0, 0);\r\n\r\n        // try to run user painting code\r\n        // only try run if valid already valid or code has changed\r\n        if (s.state.codeText !== s.internal.oldCode || s.internal.codeValid) {\r\n            // only run if we have code\r\n            if (s.state.shouldEval && s.state.codeText && s.state.codeText.length > 0) {\r\n                try {\r\n                    let wrapper = runInWrapper(s.state.codeText, s);\r\n                    window.clearTimeout(wrapper.timerHandle);\r\n                    s.internal.codeValid = true;\r\n                    s.internal.handleError(\"[no errors! :)]\");\r\n                }\r\n                catch (err) {\r\n                    s.internal.codeValid = false;\r\n                    s.internal.handleError(err.message);\r\n                }\r\n                s.internal.oldCode = s.state.codeText;\r\n            }\r\n            else {\r\n                s.internal.handleError(\"[-------------]\");\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport default CodeEffect;\r\n","import * as React from 'react';\r\n\r\ninterface MatrixTableProps {\r\n    rows: number;\r\n    cols: number;\r\n    values: Array<string>;\r\n    labels?: Array<string>;\r\n    showInput?: Array<boolean>;\r\n    onChange: (index:number, value:string) => void;\r\n}\r\n\r\nfunction handleCellChange(\r\n    ind: number,\r\n    onMatrixChange: (ind:number, val:string)=>void) {\r\n    return function(event : React.ChangeEvent<HTMLInputElement>) {\r\n        onMatrixChange(ind, event.target.value);\r\n    };\r\n}\r\n\r\nconst MatrixTable: React.FC<MatrixTableProps> = (props:MatrixTableProps) => {\r\n    if (props.values && props.rows * props.cols !== props.values.length) {\r\n        console.error(\"MatrixTable: table rows and columns don't match values\");\r\n        console.error(props.values);\r\n        return (<div>bad table.</div>);\r\n    }\r\n\r\n    function MatrixCell(row: number, col: number) {\r\n        let ind = row * props.cols + col;\r\n        let label = (null);\r\n        if (props.labels) {\r\n            label = <div className=\"controls-label\">{props.labels[ind]}</div>\r\n        }\r\n        if (props.showInput && props.showInput[ind]) {\r\n            return (\r\n                <div className=\"matrix-cell\">\r\n                {label}\r\n                <input key={\"cell-\" + ind} type=\"number\" value={props.values[ind]}\r\n                    onChange={handleCellChange(ind, props.onChange)}/>\r\n                </div>\r\n            );\r\n        }\r\n        return (<div>{label}{props.values[ind]}</div>);\r\n    }\r\n\r\n    function MatrixRow(row : number) {\r\n        let tds = Array.from(Array(props.cols).keys()).map(\r\n                (col : number) => <td key={\"col-\" + col}>{MatrixCell(row, col)}</td>\r\n            );\r\n        return <tr key={\"row-\" + row}>{tds}</tr>;\r\n    }\r\n\r\n    let rowInds = Array.from(Array(props.rows).keys());\r\n    let trs = rowInds.map(\r\n            (row : number) => MatrixRow(row)\r\n        );\r\n\r\n    return <table><tbody>{trs}</tbody></table>;\r\n}\r\n\r\nexport default MatrixTable;\r\n","import EffectLayer, {Sketcher} from \"../components/EffectLayer\";\r\nimport ImageEffect from './ImageEffect';\r\nimport MaskEffect from './MaskEffect';\r\nimport CodeEffect from './CodeEffect';\r\nimport TransformEffect from './TransformEffect';\r\n\r\nconst SCROLL_SANITY_BOUND = 100;\r\n\r\nexport enum EffectType {\r\n    Image = \"image\",\r\n    Mask = \"mask\",\r\n    Code = \"code\",\r\n    Transform = \"transform\",\r\n}\r\n\r\nexport interface ControlComponent {\r\n    getFreshState: ()=>any;\r\n    getHandlers: (el:EffectLayer)=>any;\r\n    getControlState: (el:EffectLayer)=>any;\r\n}\r\n\r\nexport interface Effect {\r\n    name: string;\r\n    control: ControlComponent; // ControlComponent, but static interfaces don't exist\r\n    preLoad: (s:Sketcher, layer:EffectLayer) => void; // one-time initialization\r\n    preDraw: (s:Sketcher) => void; // prepare to draw; usually clear canvas\r\n    draw: (s:Sketcher) => void;    // draw the effect to the canvas\r\n    mouseDragged?: (s:Sketcher, mev:MouseEvent, layer:EffectLayer) => void; // handle mouse drag\r\n    mouseWheel?: (s:Sketcher, wev:WheelEvent, layer:EffectLayer) => void; // handle mousewheel\r\n}\r\n\r\nexport function getEffect(et : EffectType) {\r\n    switch (et) {\r\n        case EffectType.Image:\r\n            return ImageEffect;\r\n        case EffectType.Mask:\r\n            return MaskEffect;\r\n        case EffectType.Code:\r\n            return CodeEffect;\r\n        case EffectType.Transform:\r\n            return TransformEffect;\r\n        default:\r\n            console.warn(\"tried to get unknown effect \" + et + \": defaulting to ImageEffect\");\r\n            return ImageEffect;\r\n    }\r\n}\r\n\r\nexport function makeScrollSane(delta: number, scrollScale: number) {\r\n    if (delta >= SCROLL_SANITY_BOUND) {\r\n        return Math.log10(delta) * scrollScale;\r\n    }\r\n    if (delta <= -SCROLL_SANITY_BOUND) {\r\n        return -1 * Math.log10(-delta) * scrollScale;\r\n    }\r\n    return delta * scrollScale;\r\n}\r\n\r\nexport function extractPointerMove(s:Sketcher, mev: MouseEvent) {\r\n    let move = null;\r\n    if (mev.movementX || mev.movementY ||\r\n            (mev.movementX === 0 && mev.movementY === 0)) {\r\n        move = [mev.movementX, mev.movementY];\r\n    }\r\n    else if (s.mouseX || s.mouseY || s.pmouseX || s.pmouseY ||\r\n            (s.mouseX === 0 && s.mouseY === 0 && s.pmouseX === 0 && s.pmouseY === 0)) {\r\n        move = [s.mouseX - s.pmouseX, s.mouseY - s.pmouseY];\r\n    }\r\n    return move;\r\n}\r\n","import * as React from 'react';\r\nimport EffectLayer from './EffectLayer';\r\nimport {ControlComponent} from '../effects/Effect';\r\nimport ControlSlider from './ControlSlider';\r\nimport MatrixTable from './MatrixTable';\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface TransformControlState {\r\n    useMatrix : boolean;\r\n\r\n    translateX : number;\r\n    translateY : number;\r\n    scaleX : number;\r\n    scaleY : number;\r\n    rotate : number; // radians\r\n    shearX : number;\r\n    shearY : number;\r\n\r\n    // matrix remembers 6 elements\r\n    // applied as [[0, 1, 2],\r\n    //             [3, 4, 5],\r\n    //             [(0), (0), (1)]]\r\n    matrix : Array<number>;\r\n    viewMatrix: Array<string>;\r\n}\r\n\r\nexport interface TransformControlHandlers {\r\n    onSliderChange: (name:string, value:number) => void;\r\n    onUseMatrixChange: (useMatrix: boolean) => void;\r\n    onInputMatrixChange: (matrix: Array<number>) => void;\r\n    onViewMatrixChange: (viewMatrix: Array<string>) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : TransformControlState,\r\n    handlers : TransformControlHandlers,\r\n}\r\n\r\nclass TransformControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getHandlers     : TransformControls.getHandlers,\r\n            getFreshState   : TransformControls.getFreshState,\r\n            getControlState : TransformControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : TransformControlState = {\r\n            useMatrix : false,\r\n            translateX : 0,\r\n            translateY : 0,\r\n            scaleX : 1,\r\n            scaleY : 1,\r\n            rotate : 0,\r\n            shearX : 0,\r\n            shearY : 0,\r\n            matrix : [1, 0, 0, 0, 1, 0], // identity\r\n            viewMatrix: [\"1\", \"0\", \"0\", \"0\", \"1\", \"0\"],\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : TransformControlHandlers = {\r\n            onSliderChange: (name : string, value : number) => {\r\n                switch (name) {\r\n                    case \"translateX\":\r\n                        el.setState({translateX:value});\r\n                        break;\r\n                    case \"translateY\":\r\n                        el.setState({translateY:value});\r\n                        break;\r\n                    case \"scaleX\":\r\n                        el.setState({scaleX:value});\r\n                        break;\r\n                    case \"scaleY\":\r\n                        el.setState({scaleY:value});\r\n                        break;\r\n                    case \"rotate\":\r\n                        el.setState({rotate:value});\r\n                        break;\r\n                    case \"shearX\":\r\n                        el.setState({shearX:value});\r\n                        break;\r\n                    case \"shearY\":\r\n                        el.setState({shearY:value});\r\n                        break;\r\n                    default:\r\n                        console.log(\"TransformEffect: unknown slider change \" + name);\r\n                        return;\r\n                }\r\n            },\r\n\r\n            onUseMatrixChange: (useMatrix: boolean) => {\r\n                el.setState({ useMatrix:useMatrix });\r\n            },\r\n\r\n            onInputMatrixChange: (matrix: Array<number>) => {\r\n                el.setState({ matrix:matrix });\r\n            },\r\n\r\n            onViewMatrixChange: (viewMatrix: Array<string>) => {\r\n                el.setState({ viewMatrix:viewMatrix });\r\n            },\r\n        }\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : TransformControlState = {\r\n            useMatrix : el.state.useMatrix,\r\n            translateX : el.state.translateX,\r\n            translateY : el.state.translateY,\r\n            scaleX : el.state.scaleX,\r\n            scaleY : el.state.scaleY,\r\n            rotate : el.state.rotate,\r\n            shearX : el.state.shearX,\r\n            shearY : el.state.shearY,\r\n            matrix : el.state.matrix,\r\n            viewMatrix : el.state.viewMatrix,\r\n        }\r\n        return ctrl;\r\n    };\r\n\r\n    handleSliderChange = (name : string, value : number) => {\r\n        this.props.handlers.onSliderChange(name, value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onUseMatrixChange(event.target.checked);\r\n    };\r\n\r\n    handleMatrixChange = (ind : number, val : string) => {\r\n        let newMatrix = Array.from(this.props.control.matrix);\r\n        newMatrix[ind] = parseFloat(val);\r\n        let newView = Array.from(this.props.control.viewMatrix);\r\n        newView[ind] = val;\r\n        this.props.handlers.onViewMatrixChange(newView);\r\n        this.props.handlers.onInputMatrixChange(newMatrix);\r\n    };\r\n\r\n    handleResetPressed = () => {\r\n        this.props.handlers.onSliderChange(\"translateX\", 0);\r\n        this.props.handlers.onSliderChange(\"translateY\", 0);\r\n        this.props.handlers.onSliderChange(\"scaleX\", 1);\r\n        this.props.handlers.onSliderChange(\"scaleY\", 1);\r\n        this.props.handlers.onSliderChange(\"rotate\", 0);\r\n        this.props.handlers.onSliderChange(\"shearX\", 0);\r\n        this.props.handlers.onSliderChange(\"shearY\", 0);\r\n\r\n        this.props.handlers.onInputMatrixChange([1, 0, 0, 0, 1, 0]);\r\n        this.props.handlers.onViewMatrixChange([\"1\", \"0\", \"0\", \"0\", \"1\", \"0\"]);\r\n    }\r\n\r\n    render() {\r\n        let bottom_controls = {};\r\n        let viewValues = [];\r\n        if (this.props.control.viewMatrix) {\r\n            viewValues = this.props.control.viewMatrix.concat([\"0\", \"0\", \"1\"]);\r\n        }\r\n        else {\r\n            viewValues = this.props.control.matrix.map(\r\n                (v: number)=>v.toString()).concat([\"0\", \"0\", \"1\"]);\r\n        }\r\n        if (this.props.control.useMatrix) {\r\n            bottom_controls = (<div>\r\n                <MatrixTable rows={3} cols={3} onChange={this.handleMatrixChange}\r\n                        values={viewValues}\r\n                        labels={[\"a\", \"c\", \"e\", \"b\", \"d\", \"f\"]}\r\n                        showInput={[true, true, true, true, true, true, false, false, false]}/>\r\n            </div>);\r\n        }\r\n        else {\r\n            bottom_controls = (<div>\r\n                <ControlSlider label=\"translate X\" name=\"translateX\" value={this.props.control.translateX} onChange={this.handleSliderChange} min={-2} max={2} units=\"x\"/>\r\n                <ControlSlider label=\"translate Y\" name=\"translateY\" value={this.props.control.translateY} onChange={this.handleSliderChange} min={-2} max={2} units=\"x\"/>\r\n                <ControlSlider label=\"scale X\" name=\"scaleX\" value={this.props.control.scaleX} onChange={this.handleSliderChange} min={-5} max={5} units=\"x\"/>\r\n                <ControlSlider label=\"scale Y\" name=\"scaleY\" value={this.props.control.scaleY} onChange={this.handleSliderChange} min={-5} max={5} units=\"x\"/>\r\n                <ControlSlider label=\"shear X\" name=\"shearX\" value={this.props.control.shearX} onChange={this.handleSliderChange} min={-Math.PI/2} max={Math.PI/2} units=\"rad\"/>\r\n                <ControlSlider label=\"shear Y\" name=\"shearY\" value={this.props.control.shearY} onChange={this.handleSliderChange} min={-Math.PI/2} max={Math.PI/2} units=\"rad\"/>\r\n                <ControlSlider label=\"rotate\" name=\"rotate\" value={this.props.control.rotate} onChange={this.handleSliderChange} min={-Math.PI} max={Math.PI} units=\"rad\"/>\r\n            </div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                    <label className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Custom Matrix</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.useMatrix} onChange={this.handleCheckboxChange}/>\r\n                    </label>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    {bottom_controls}\r\n                    <button className=\"controls-bar\" onClick={this.handleResetPressed}>Reset</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TransformControls;\r\n","import {Effect, makeScrollSane, extractPointerMove} from './Effect';\r\nimport EffectLayer, {Sketcher} from '../components/EffectLayer';\r\nimport TransformControls from '../components/TransformControls';\r\n\r\nconst SCALE_SCROLL_SPEED = 0.05;\r\nconst SHEAR_SCROLL_SPEED = -0.05;\r\nconst ROTATE_SCROLL_SPEED = -0.025;\r\n\r\n// Transform Effect.\r\n// Transforms according to controls, or applies a transformation matrix.\r\nvar TransformEffect : Effect = {\r\n    name : \"Transform\",\r\n    control : TransformControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher) => {\r\n        \r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n        s.resetMatrix();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        if (s.state.useMatrix) {\r\n            let mat = s.state.matrix;\r\n            // matrix holds [[a, c, e],\r\n            //               [b, d, f],\r\n            //               [0, 0, 1]]\r\n            // applied as (a, b, c, d, e, f)\r\n            //let arranged = [mat[0], mat[3], mat[1], mat[4], mat[2], mat[5]];\r\n            s.applyMatrix(mat[0], mat[3], mat[1], mat[4], mat[2], mat[5]);\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n        else {\r\n            // transform so center of image is origin\r\n            s.translate(s.props.size/2, s.props.size/2);\r\n\r\n            // apply transform settings\r\n            s.scale(s.state.scaleX, s.state.scaleY);\r\n            s.translate(s.state.translateX * s.props.size, \r\n                s.state.translateY * s.props.size);\r\n            s.shearX(s.state.shearX);\r\n            s.shearY(s.state.shearY);\r\n            s.rotate(s.state.rotate);\r\n\r\n            // draw pixels around center\r\n            s.image(s.baseImg, -s.props.size/2, -s.props.size/2);\r\n        }\r\n    },\r\n\r\n    mouseDragged : (s: Sketcher, mev: MouseEvent, layer:EffectLayer) => {\r\n        let move = extractPointerMove(s, mev);\r\n        if (move) {\r\n            layer.setState({\r\n                translateX: s.state.translateX + move[0] / s.props.size,\r\n                translateY: s.state.translateY + move[1] / s.props.size,\r\n            });\r\n        }\r\n        return;\r\n    },\r\n\r\n    mouseWheel : (s:Sketcher, wev:WheelEvent, layer:EffectLayer) => {\r\n        let delt = (wev as any).delta;\r\n        if (!delt) {\r\n            delt = wev.deltaY;\r\n        }\r\n        if (wev.deltaX) {\r\n            if (wev.altKey) {\r\n                layer.setState({\r\n                    shearY: s.state.shearY + makeScrollSane(wev.deltaX, SHEAR_SCROLL_SPEED),\r\n                }); \r\n            }\r\n            else {\r\n                layer.setState({\r\n                    shearX: s.state.shearX + makeScrollSane(wev.deltaX, SHEAR_SCROLL_SPEED),\r\n                });\r\n            }\r\n        }\r\n        else if (delt) {\r\n            if (wev.altKey) {\r\n                layer.setState({\r\n                    rotate: s.state.rotate + makeScrollSane(delt, ROTATE_SCROLL_SPEED),\r\n                });\r\n            }\r\n            else {\r\n                layer.setState({\r\n                    scaleX: s.state.scaleX - makeScrollSane(delt, SCALE_SCROLL_SPEED),\r\n                    scaleY: s.state.scaleX - makeScrollSane(delt, SCALE_SCROLL_SPEED),\r\n                });\r\n            }\r\n        }\r\n    },\r\n};\r\n\r\nexport default TransformEffect;\r\n","import * as React from 'react';\r\nimport {EffectType} from '../effects/Effect';\r\n\r\nexport interface Props {\r\n    onAdd : (et : EffectType) => void;\r\n}\r\n\r\ninterface State {\r\n    selected : EffectType;\r\n}\r\n\r\nclass LayerAdder extends React.Component<Props, State> {\r\n    effects : Array<EffectType>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.effects = [];\r\n        for (let e in EffectType) {\r\n            this.effects.push(EffectType[e] as EffectType);\r\n        }\r\n        this.state = {selected:this.effects[0]};\r\n    }\r\n\r\n    handleSelection = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        let i : number;\r\n        for (i = 0; i < this.effects.length; i++) {\r\n            if (this.effects[i] === event.target.value) {\r\n                this.setState({ selected : this.effects[i] });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAdd = () => {\r\n        this.props.onAdd(this.state.selected);\r\n    }\r\n\r\n    render() {\r\n        const effectList = this.effects.map((effect) => \r\n                <option value={effect} key={effect}>{effect}</option>\r\n            );\r\n        return (\r\n            <div>\r\n                <div>effects?</div>\r\n                <select value={this.state.selected} onChange={this.handleSelection}>\r\n                    {effectList}\r\n                </select>\r\n                <button onClick={this.handleAdd}>add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LayerAdder;\r\n","import * as React from 'react';\r\nimport {Layer} from './LayerStack';\r\nimport {Effect, EffectType, getEffect} from '../effects/Effect';\r\nimport ImageControls from './ImageControls';\r\nimport CodeControls from './CodeControls';\r\nimport TransformControls from './TransformControls';\r\n\r\nconst EFFECT_RENDERER = \"p2d\"; // \"webgl\" | \"p2d\" // webgl doesn't work very well yet\r\n\r\ninterface Props {\r\n    size : number;\r\n    ind : number;\r\n    type: EffectType;\r\n\r\n    callbackContainer: Layer;\r\n\r\n    onNewOutput: (eindex: number, pixels: Uint8ClampedArray) => void;\r\n    onRemove: (eindex: number) => void;\r\n    onMove: (eindex: number, diff: number) => number;\r\n\r\n    isFirst?: boolean;\r\n    isLast?: boolean;\r\n}\r\n\r\ninterface State {\r\n    [x:string]: any; // lifted state from inner components\r\n    basepixels?: Uint8ClampedArray; // (size * size * 4) length\r\n}\r\n\r\nexport interface Sketcher extends p5 {\r\n    props : Props;\r\n    state : State;\r\n    internal : any;\r\n    baseImg: p5.Image;\r\n}\r\n\r\nfunction getSketcher(parent : EffectLayer, effect : Effect) {\r\n    let sketcher = function (s : Sketcher) {\r\n        s.props = parent.props;\r\n        s.state = parent.state;\r\n        s.internal = {}; // for use by effect\r\n\r\n        s.preload = function() {\r\n            s.baseImg = s.createImage(s.props.size, s.props.size);\r\n\r\n            // one-time effect initialization\r\n            effect.preLoad(s, parent);\r\n        }\r\n\r\n        s.setup = function() {\r\n            s.pixelDensity(1);\r\n            s.createCanvas(s.props.size, s.props.size, EFFECT_RENDERER);\r\n        }\r\n\r\n        function preDraw() {\r\n            // re-fetch state.\r\n            s.state = parent.state;\r\n\r\n            // apply base pixels from previous layer to buffer image\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.baseImg.loadPixels();\r\n            if (s.state.basepixels) {\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = s.state.basepixels[i];\r\n                }\r\n            }\r\n            else {\r\n                // zero out base image;\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = 0;\r\n                }\r\n            }\r\n            s.baseImg.updatePixels();\r\n\r\n            // prepare to draw this frame\r\n            effect.preDraw(s);\r\n        }\r\n\r\n        s.draw = function() {\r\n            preDraw();\r\n\r\n            // draw this frame\r\n            effect.draw(s);\r\n\r\n            // inform that new pixels are created\r\n            s.loadPixels();\r\n            parent.onOutput(Uint8ClampedArray.from(s.pixels));\r\n        }\r\n\r\n        function mouseInBounds() {\r\n            return s.mouseX > 0 && s.mouseY > 0 && s.mouseX < s.props.size && s.mouseY < s.props.size;\r\n        }\r\n\r\n        s.mouseDragged = function(event: object) {\r\n            if (!mouseInBounds()) {\r\n                return; // mouse was not on this canvas\r\n            }\r\n            if (effect.mouseDragged) {\r\n                let mev = event as MouseEvent;\r\n                // allow effect to do something with mouse event\r\n                effect.mouseDragged(s, mev, parent);\r\n                mev.preventDefault();\r\n            }\r\n        }\r\n\r\n        s.mouseWheel = function(event: object) {\r\n            if (!mouseInBounds()) {\r\n                return;\r\n            }\r\n            if (effect.mouseWheel) {\r\n                let wev = event as WheelEvent;\r\n                effect.mouseWheel(s, wev, parent);\r\n                wev.preventDefault();\r\n            }\r\n        }\r\n    };\r\n    return sketcher;\r\n}\r\n\r\nfunction getDefaultFilename(el : EffectLayer) {\r\n    return \"token-\" + el.props.size + \"px.png\";\r\n}\r\n\r\nclass EffectLayer extends React.PureComponent<Props, State> {\r\n    EMPTY_BASE: Uint8ClampedArray;\r\n    canvas?: p5;\r\n    effect: Effect;\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.EMPTY_BASE = new Uint8ClampedArray(this.props.size * this.props.size * 4);\r\n        this.props.callbackContainer.onNewBasePixels = this.handleBasePixelsChanged;\r\n        this.effect = getEffect(this.props.type);\r\n        this.state = {\r\n            ...this.effect.control.getFreshState(),\r\n        };\r\n        this.canvas = undefined;\r\n    }\r\n\r\n    handleBasePixelsChanged = (pixels?: Uint8ClampedArray | null) => {\r\n        if (pixels) {\r\n            this.setState({ basepixels: pixels });\r\n        }\r\n        else {\r\n            //console.log(\"EffectLayer: no base pixels\");\r\n            this.setState({ basepixels: this.EMPTY_BASE });\r\n        }\r\n    }\r\n\r\n    handleRemoveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onRemove) {\r\n            this.props.onRemove(this.props.ind);\r\n        }\r\n    }\r\n\r\n    handleSaveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.canvas) {\r\n            this.canvas.saveCanvas(getDefaultFilename(this));\r\n        }\r\n    }\r\n\r\n    handleMoveUpPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onMove) {\r\n            this.props.onMove(this.props.ind, 1);\r\n        }\r\n    }\r\n\r\n    handleMoveDownPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onMove) {\r\n            this.props.onMove(this.props.ind, -1);\r\n        }\r\n    }\r\n\r\n    onOutput = (pixels : Uint8ClampedArray) => {\r\n        // always emit, since it's difficult to tell when the next\r\n        // will need an update, even when we've not had a difference.\r\n        this.props.onNewOutput(this.props.ind, pixels);\r\n        return;\r\n    }\r\n\r\n    getCanvasID = () => {\r\n        return \"image-canvas-\" + this.props.callbackContainer.key;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = new window.p5(getSketcher(this, this.effect), document.getElementById(this.getCanvasID()) as HTMLElement);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log(\"EffectLayer: unmounting\");\r\n        if (this.canvas) {\r\n            this.canvas.remove();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let controls = <div className=\"controls\"></div>;\r\n        switch (this.props.type) {\r\n            case EffectType.Image: // falltrough\r\n            case EffectType.Mask:\r\n                controls = (\r\n                    <ImageControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)} parentEffectType={this.props.type}/>\r\n                    );\r\n                break;\r\n            case EffectType.Code:\r\n                controls = (\r\n                    <CodeControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            case EffectType.Transform:\r\n                controls = (\r\n                    <TransformControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            default:\r\n                console.error(\"EffectLayer: can't render controls for unknown effect type\");\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"effect-container\" id={\"effect-container\"+this.props.callbackContainer.key}>\r\n                <div className=\"effect-left-unit\">\r\n                    <div className=\"effect-title\">\r\n                        <button className=\"effect-move-up\"\r\n                            onClick={this.handleMoveUpPressed}\r\n                            disabled={this.props.isLast}>▲</button>\r\n                        <hr/>\r\n                        <div>[{this.props.ind + 1}]</div><div>{this.effect.name}</div>\r\n                        <button className=\"effect-save-button\"\r\n                            onClick={this.handleSaveButtonPressed}>save</button>\r\n                        <button className=\"effect-remove-button\"\r\n                            onClick={this.handleRemoveButtonPressed}>remove</button>\r\n                        <hr/>\r\n                        <button className=\"effect-move-down\"\r\n                            onClick={this.handleMoveDownPressed}\r\n                            disabled={this.props.isFirst}>▼</button>\r\n                    </div>\r\n                    <div className=\"effect-canvas\">\r\n                        <div className=\"canvas-container\" id={this.getCanvasID()}></div>\r\n                    </div>\r\n                </div>\r\n                {controls}\r\n            </div>\r\n        );\r\n    }\r\n    // xoffset={this.state.xoffset} yoffset={this.state.yoffset} scale={this.state.scale}\r\n}\r\n\r\nexport default EffectLayer;\r\n","import * as React from 'react';\r\nimport LayerAdder from './LayerAdder';\r\nimport EffectLayer from './EffectLayer';\r\nimport {EffectType} from '../effects/Effect';\r\n\r\nexport interface Layer {\r\n    type : EffectType;\r\n    key : number;\r\n    onNewBasePixels: (pixels?: Uint8ClampedArray) => void; // empty until an EffectLayer constructor supplies it\r\n}\r\n\r\ninterface Props {\r\n    canvasSize : number;\r\n}\r\n\r\ninterface State {\r\n    layers : Array<Layer>;\r\n}\r\n\r\nclass LayerStack extends React.Component<Props,State> {\r\n    freeKey : number = 0;\r\n    results : Array<Uint8ClampedArray> = [];\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = { layers : [] };\r\n    }\r\n\r\n    newLayer = (et : EffectType) => {\r\n        const newLayers = this.state.layers.concat({ \r\n                type:et,\r\n                key:this.freeKey,\r\n                onNewBasePixels:()=>{},\r\n            });\r\n        this.freeKey++;\r\n        this.results.push(new Uint8ClampedArray(this.props.canvasSize * this.props.canvasSize * 4));\r\n        this.setState({ layers : newLayers });\r\n    };\r\n\r\n    handleNewOutput = (effectIndex : number, pixels : Uint8ClampedArray) => {\r\n        this.results[effectIndex] = pixels;\r\n        if (effectIndex < this.state.layers.length - 1) {\r\n          this.state.layers[effectIndex+1].onNewBasePixels(pixels);\r\n        }\r\n        return;\r\n    };\r\n\r\n    handleAddEffect = (et : EffectType) => {\r\n        this.newLayer(et);\r\n    };\r\n\r\n    handleRemoveEffect = (effectIndex : number) => {\r\n        if (effectIndex < 0 || effectIndex >= this.state.layers.length) {\r\n          console.error(\"can't remove effect at bad index \" + effectIndex);\r\n          return;\r\n        }\r\n        if (effectIndex < this.state.layers.length - 1) {\r\n          if (effectIndex > 0) {\r\n            this.state.layers[effectIndex+1].onNewBasePixels(this.results[effectIndex-1]);\r\n          }\r\n          else {\r\n            this.state.layers[effectIndex+1].onNewBasePixels();\r\n          }\r\n        }\r\n        this.results.splice(effectIndex, 1);\r\n        const newLayers = this.state.layers.slice(0,effectIndex).concat(this.state.layers.slice(effectIndex+1));\r\n        this.setState({ layers : newLayers });\r\n        };\r\n\r\n        handleMoveEffect = (effectIndex : number, move : number) => {\r\n        let newIndex = effectIndex + move;\r\n        if ( newIndex < 0 || newIndex >= this.state.layers.length) {\r\n          console.error(\"can't move effect \" + effectIndex + \" to position \" + newIndex);\r\n        }\r\n        const newLayers = this.state.layers.slice();\r\n        let removed = newLayers.splice(effectIndex, 1)[0];\r\n        newLayers.splice(newIndex, 0, removed);\r\n\r\n        this.setState({ layers : newLayers });\r\n        return newIndex;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.newLayer(EffectType.Image);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.layers.length > 0) {\r\n            this.state.layers[0].onNewBasePixels();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const layerList = this.state.layers.map((layer, index) => \r\n            <EffectLayer key={layer.key} type={layer.type} size={this.props.canvasSize} ind={index}\r\n                callbackContainer={layer}\r\n                onNewOutput={this.handleNewOutput}\r\n                onRemove={this.handleRemoveEffect}\r\n                onMove={this.handleMoveEffect}\r\n                isFirst={(index === 0)}\r\n                isLast={(index === this.state.layers.length-1)}/>\r\n          );\r\n        return (\r\n            <div key={this.props.canvasSize} className=\"layer-stack\">\r\n                <hr/>\r\n                    <LayerAdder onAdd={this.handleAddEffect}/>\r\n                <hr/>\r\n                <div className=\"list-container\">\r\n                <div className=\"list-side-spacer\"></div>\r\n                <div className=\"effect-list\">\r\n                    {layerList}\r\n                </div>\r\n                <div className=\"list-side-spacer\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default LayerStack;\r\n","import * as React from 'react';\r\nimport {DEFAULT_CANVAS_SIZE, MAX_CANVAS_SIZE} from '../App'\r\n\r\ninterface Props {\r\n    onSizeChange : (newSize : number) => void;\r\n}\r\n\r\ninterface State {\r\n    inputCanvasSize : string;\r\n}\r\n\r\n//const BUILT_INS = [...Array.from(Array(10).keys()).filter((i) => i > 4), 100];\r\n\r\nclass SizeSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {\r\n            inputCanvasSize: DEFAULT_CANVAS_SIZE.toString(),\r\n        };\r\n    }\r\n\r\n    handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n        let sizeNum = parseInt(this.state.inputCanvasSize);\r\n        if (sizeNum) {\r\n            this.props.onSizeChange(sizeNum);\r\n        }\r\n        event.preventDefault();\r\n    };\r\n\r\n    handleInputChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ inputCanvasSize: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"size-selector\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                <div>Size (pixels):</div>\r\n                <input type=\"number\" min={1} max={MAX_CANVAS_SIZE} value={this.state.inputCanvasSize}\r\n                    onChange={this.handleInputChanged}/>\r\n                <input type=\"submit\" value=\"apply\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SizeSelector;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LayerStack from './components/LayerStack';\r\nimport SizeSelector from './components/SizeSelector';\r\n\r\nexport const DEFAULT_CANVAS_SIZE = Math.pow(2, 8); // 256\r\nexport const MAX_CANVAS_SIZE = Math.pow(2, 10);    // 1024\r\n\r\ninterface State {\r\n    canvasSize : number;\r\n}\r\n\r\nclass App extends React.Component<any,State> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = { canvasSize : DEFAULT_CANVAS_SIZE };\r\n    }\r\n\r\n    handleSizeChange = (newSize : number) => {\r\n        if (newSize > 0 && newSize <= MAX_CANVAS_SIZE) {\r\n            this.setState({canvasSize : newSize});\r\n        }\r\n        else {\r\n            console.error(\"Canvas size of \" + newSize + \" is not supported (max \" + MAX_CANVAS_SIZE + \").\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Token Clipper</h1>\r\n                <SizeSelector onSizeChange={this.handleSizeChange}/>\r\n                <LayerStack canvasSize={this.state.canvasSize}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}