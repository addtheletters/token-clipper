{"version":3,"sources":["components/SourceSelector.tsx","components/ControlSlider.tsx","components/ImageControls.tsx","effects/ImageEffect.tsx","effects/MaskEffect.tsx","components/CodeControls.tsx","effects/CodeEffect.tsx","components/MatrixTable.tsx","effects/Effect.tsx","components/TransformControls.tsx","effects/TransformEffect.tsx","components/LayerAdder.tsx","components/EffectLayer.tsx","components/LayerStack.tsx","components/SizeSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SourceType","BUILT_INS","Yuratzu of Pain (167 x 173px)","Mask Circle (radius 128px)","Mask Square (side 256px)","SourceSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleURLInputChange","event","target","value","length","onSourceChange","URL","toString","err","console","log","handleFileInputChange","files","createObjectURL","error","handleBuiltInChange","setState","selectedBuiltIn","handleSourceTypeChange","selectedType","BuiltIn","state","st","sbi","keys","parentEffectType","EffectType","Mask","Image","LocalFile","subSelector","typeList","map","k","t","react","key","s","prettySource","type","accept","name","onChange","subList","className","React","INCS","ControlSlider","onValueChange","valMin","valMax","scaled_value","min","max","units_div","units","label","toFixed","scaledValue","parseFloat","ImageControls","handleSliderChange","handlers","onSliderChange","handleCheckboxChange","onInvertChange","checked","handleSourceChange","invert_text","components_SourceSelector","control","invert","components_ControlSlider","xoffset","yoffset","scale","el","url","src","getFreshState","getHandlers","getControlState","CORS_PROXY_URL","ImageEffect","controlFuncs","preLoad","internal","text","preDraw","img","tmpsrc","trim","loadImage","warn","clear","draw","image","baseImg","imgw","width","imgh","height","size","textSize","MaskEffect","mask","createImage","psize","loadPixels","i","pixels","updatePixels","CodeControls","handleTextFieldChange","onCodeChange","onShouldEvalChange","shouldEval","USER_CODE_INSTANCE_NAME","errorText","codeText","code","should","TIME_LIMIT_MS","runInWrapper","__code__","__instance__","__wrapper__","instance","wrapper","timeExpired","timerHandle","proxy","undefined","window","setTimeout","w","Proxy","get","property","receiver","EvalError","getP5InstanceWrapper","Function","clearTimeout","CodeEffect","layer","oldCode","codeValid","handleError","errorString","message","handleCellChange","ind","onMatrixChange","MatrixTable","values","rows","cols","MatrixRow","row","tds","Array","from","col","labels","showInput","MatrixCell","trs","TransformControls","onUseMatrixChange","handleMatrixChange","val","newMatrix","matrix","newView","viewMatrix","onViewMatrixChange","onInputMatrixChange","bottom_controls","viewValues","concat","v","useMatrix","components_MatrixTable","translateX","translateY","scaleX","scaleY","shearX","Math","PI","shearY","rotate","TransformEffect","resetMatrix","mat","applyMatrix","translate","LayerAdder","e","effects","handleSelection","selected","handleAdd","onAdd","push","effectList","effect","onClick","EFFECT_RENDERER","getSketcher","parent","preload","setup","pixelDensity","createCanvas","basepixels","onOutput","Uint8ClampedArray","EffectLayer","EMPTY_BASE","canvas","handleBasePixelsChanged","handleRemoveButtonPressed","onRemove","handleSaveButtonPressed","saveCanvas","assertThisInitialized","handleMoveUpPressed","onMove","handleMoveDownPressed","onNewOutput","getCanvasID","callbackContainer","onNewBasePixels","et","Code","Transform","getEffect","objectSpread","p5","document","getElementById","remove","controls","components_ImageControls","components_CodeControls","components_TransformControls","id","disabled","isLast","isFirst","LayerStack","freeKey","results","newLayer","newLayers","layers","canvasSize","handleNewOutput","effectIndex","handleAddEffect","handleRemoveEffect","splice","slice","handleMoveEffect","move","newIndex","removed","_this2","layerList","index","components_EffectLayer","components_LayerAdder","SizeSelector","handleSubmit","sizeNum","parseInt","inputCanvasSize","onSizeChange","preventDefault","handleInputChanged","DEFAULT_CANVAS_SIZE","onSubmit","MAX_CANVAS_SIZE","pow","App","handleSizeChange","newSize","react_default","a","createElement","components_SizeSelector","components_LayerStack","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAGKA,sKAiCL,IAAMC,EAAuB,CACzBC,gCAAkC,qBAClCC,6BAAkC,8BAClCC,2BAAkC,+BAmIvBC,cA/HX,SAAAA,EAAYC,GAAe,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACvBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsBVQ,qBAAuB,SAACC,GACpB,GAAIA,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAMC,OAAS,EAClD,IACIX,EAAKD,MAAMa,eAAgB,IAAIC,IAAIL,EAAMC,OAAOC,OAAQI,YAE5D,MAAOC,GACHC,QAAQC,IAAI,6CA7BGjB,EAkC3BkB,sBAAwB,SAACV,GACK,MAAtBA,EAAMC,OAAOU,OAAiBX,EAAMC,OAAOU,MAAMR,OAAS,EAC1DX,EAAKD,MAAMa,eAAeC,IAAIO,gBAAgBZ,EAAMC,OAAOU,MAAM,KAGjEH,QAAQK,MAAM,iCAvCKrB,EA2C3BsB,oBAAsB,SAACd,GACfA,EAAMC,OAAOC,SAAShB,GACtBM,EAAKuB,SAAS,CAACC,gBAAkBhB,EAAMC,OAAOC,QAC9CV,EAAKD,MAAMa,eAAelB,EAAUc,EAAMC,OAAOC,SAGjDM,QAAQK,MAAM,2CAA6Cb,EAAMC,OAAOC,QAjDrDV,EAqD3ByB,uBAAyB,SAACjB,GACtBR,EAAKuB,SAAS,CAACG,aAAalB,EAAMC,OAAOC,QACrCF,EAAMC,OAAOC,QAAUjB,EAAWkC,QAElC3B,EAAKD,MAAMa,eAAelB,EAAUM,EAAK4B,MAAMJ,kBAI/CxB,EAAKD,MAAMa,eAAe,KA3D9B,IAAIiB,EAAMpC,EAAWkC,QACjBG,EAAM7B,OAAO8B,KAAKrC,GAAW,GAEjC,OAAQM,EAAKD,MAAMiC,kBACf,KAAKC,EAAWC,KACZL,EAAMpC,EAAWkC,QACjBG,EAAM7B,OAAO8B,KAAKrC,GAAW,GAC7B,MACJ,KAAKuC,EAAWE,MACZN,EAAMpC,EAAW2C,UAXF,OAiBvBpC,EAAK4B,MAAQ,CACTF,aAAcG,EACdL,gBAAkBM,GAnBC9B,mFAkEvB,OAAQG,KAAKyB,MAAMF,cACf,KAAKjC,EAAWkC,QAEZxB,KAAKJ,MAAMa,eAAelB,EAAUS,KAAKyB,MAAMJ,oDAQvD,IAKIa,EALEC,EAAWrC,OAAO8B,KAAKtC,GAAY8C,IAAI,SAAAC,GACrC,IAAIC,EAAIhD,EAAW+C,GACnB,OAAQE,EAAA,wBAAQhC,MAAO+B,EAAGE,IAAKF,GAvG/C,SAAsBG,GAClB,OAAQA,GACJ,KAAKnD,EAAWkC,QACZ,MAAO,WACX,KAAKlC,EAAW2C,UACZ,MAAO,aACX,KAAK3C,EAAWoB,IACZ,MAAO,MACX,QACI,MAAO,uBA8FgCgC,CAAaJ,MAIxD,OAAQtC,KAAKyB,MAAMF,cACf,KAAKjC,EAAW2C,UACZC,EACIK,EAAA,uBAAOI,KAAK,OAAOC,OAAO,UAAUC,KAAK,WACrCC,SAAU9C,KAAKe,wBAEvB,MACJ,KAAKzB,EAAWoB,IACZwB,EACIK,EAAA,uBAAOI,KAAK,MAAME,KAAK,UACnBC,SAAU9C,KAAKI,uBAEvB,MACJ,KAAKd,EAAWkC,QACZ,IAAIuB,EAAUjD,OAAO8B,KAAKrC,GAAW6C,IAAI,SAAAC,GACrC,OAAQE,EAAA,wBAAQhC,MAAO8B,EAAGG,IAAKH,GAAIA,KAEvCH,EACIK,EAAA,wBAAQM,KAAK,cAActC,MAAOP,KAAKyB,MAAMJ,gBACzCyB,SAAU9C,KAAKmB,qBACd4B,GAGT,MACJ,QACIb,EAAeK,EAAA,gDAA0BvC,KAAKyB,MAAMF,cAI5D,OACIgB,EAAA,qBAAKS,UAAU,iBACXT,EAAA,qBAAKS,UAAU,sBACXT,EAAA,wBAAQhC,MAAOP,KAAKyB,MAAMF,aAAcuB,SAAU9C,KAAKsB,wBAClDa,IAGTI,EAAA,qBAAKS,UAAU,qBACVd,WAzHQe,aCxCvBC,EAAO,IAsBb,IAiBeC,EAjB8B,SAACvD,GAC1C,IATIwD,EACAC,EAAeC,EAQfC,EAAeL,GAAQtD,EAAMW,MAAQX,EAAM4D,MAAQ5D,EAAM6D,IAAM7D,EAAM4D,KACrEE,EAAa,KAIjB,OAHI9D,EAAM+D,QACND,EAAYnB,EAAA,qBAAKS,UAAU,kBAAkBpD,EAAM+D,MAAQ/D,EAAM+D,MAAQ,KAGzEpB,EAAA,qBAAKS,UAAU,gBACXT,EAAA,qBAAKS,UAAU,kBAAkBpD,EAAMgE,OACvCrB,EAAA,qBAAKS,UAAU,kBAAkBpD,EAAMW,MAAMsD,QAAQ,IACpDH,EACDnB,EAAA,uBAAOI,KAAK,QAAQE,KAAMjD,EAAMiD,KAAMtC,MAAOgD,EAAcP,UAAU,UACjEQ,IAAK,EAAGC,IAAKP,EAAMJ,UApB3BM,EAoB2DxD,EAAMkD,SAnBjEO,EAmB2EzD,EAAM4D,IAnBlEF,EAmBuE1D,EAAM6D,IAlBzF,SAASpD,GACZ,IAAIyD,EAAcT,EAAUU,WAAW1D,EAAMC,OAAOC,OAAS2C,GAAQI,EAASD,GAC9E,OAAOD,EAAc/C,EAAMC,OAAOuC,KAAMiB,SCqHjCE,6MA7CXC,mBAAqB,SAACpB,EAAetC,GACjCV,EAAKD,MAAMsE,SAASC,eAAetB,EAAMtC,MAG7C6D,qBAAuB,SAAC/D,GACpBR,EAAKD,MAAMsE,SAASG,eAAehE,EAAMC,OAAOgE,YAGpDC,mBAAqB1E,EAAKD,MAAMsE,SAASzD,uFAGrC,IAAI+D,EAAuB,SAC3B,OAAQxE,KAAKJ,MAAMiC,kBACf,KAAKC,EAAWE,MACZwC,EAAc,cACd,MACJ,KAAK1C,EAAWC,KACZyC,EAAc,gBAKtB,OACIjC,EAAA,qBAAKS,UAAU,YACXT,EAAA,qBAAKS,UAAU,gBACZT,EAAA,cAACkC,EAAD,CAAgBhE,eAAgBT,KAAKuE,mBAAoB1C,iBAAkB7B,KAAKJ,MAAMiC,oBAEzFU,EAAA,qBAAKS,UAAU,mBACXT,EAAA,qBAAKS,UAAU,gBACXT,EAAA,qBAAKS,UAAU,kBAAkBwB,GACjCjC,EAAA,uBAAOI,KAAK,WAAWK,UAAU,0BAC7BsB,QAAStE,KAAKJ,MAAM8E,QAAQC,OAAQ7B,SAAU9C,KAAKoE,wBAE3D7B,EAAA,cAACqC,EAAD,CAAehB,MAAM,WAAWf,KAAK,UAAUtC,MAAOP,KAAKJ,MAAM8E,QAAQG,QACrE/B,SAAU9C,KAAKiE,mBAAoBT,KAAM,EAAGC,IAAK,EAAGE,MAAM,MAC9DpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,WAAWf,KAAK,UAAUtC,MAAOP,KAAKJ,MAAM8E,QAAQI,QACrEhC,SAAU9C,KAAKiE,mBAAoBT,KAAM,EAAGC,IAAK,EAAGE,MAAM,MAC9DpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,QAAQf,KAAK,QAAQtC,MAAOP,KAAKJ,MAAM8E,QAAQK,MAChEjC,SAAU9C,KAAKiE,mBAAoBT,IAAK,KAAQC,IA5HtD,EA4HsEE,MAAM,kDAjFtF,MAPgC,CAC5BkB,QAAU,EACVC,QAAU,EACVC,MAAQ,EAERJ,QAAS,uCAKGK,GAyBhB,MAxBsC,CAClCb,eAAgB,SAACtB,EAAetC,GACf,YAATsC,EACAmC,EAAG5D,SAAS,CAAEyD,QAAQtE,IAER,YAATsC,EACLmC,EAAG5D,SAAS,CAAE0D,QAAQvE,IAER,UAATsC,EACLmC,EAAG5D,SAAS,CAAE2D,MAAMxE,IAGpBM,QAAQC,IAAI,sCAAwC+B,IAI5DwB,eAAgB,SAAC9D,GACbyE,EAAG5D,SAAS,CAAEuD,OAAOpE,KAGzBE,eAAgB,SAACwE,GACbD,EAAG5D,SAAS,CAAE8D,IAAID,8CAMND,GASpB,MAR+B,CAC3BH,QAASG,EAAGvD,MAAMoD,QAClBC,QAASE,EAAGvD,MAAMqD,QAClBC,MAAOC,EAAGvD,MAAMsD,MAEhBG,IAAKF,EAAGvD,MAAMyD,IACdP,OAAQK,EAAGvD,MAAMkD,6CArDrB,MAAO,CACHQ,cAAgBnB,EAAcmB,cAC9BC,YAAcpB,EAAcoB,YAC5BC,gBAAkBrB,EAAcqB,wBALhBpC,aCxBtBqC,EAAiB,uCAgFRC,EA5EY,CACvB1C,KAAO,QACP6B,QAAUV,EAAcwB,aAExBC,QAAU,SAAChD,GACPA,EAAEiD,SAASC,KAAO,YAGtBC,QAAU,SAACnD,GAEP,GAAIA,EAAEhB,MAAMyD,KAAOzC,EAAEhB,MAAMyD,MAAQzC,EAAEiD,SAASR,IAAK,CAC/CzC,EAAEiD,SAASR,IAAMzC,EAAEhB,MAAMyD,IACzBzC,EAAEiD,SAASG,IAAM,KAEjB,IAAIC,EAASrD,EAAEhB,MAAMyD,IAAIa,OAEzBtD,EAAEuD,UAAUF,EAAQ,SAACD,GACjBpD,EAAEiD,SAASG,IAAMA,GAErB,SAACjF,GACG6B,EAAEiD,SAASC,KA5BV,sCAgCG9E,QAAQC,IAAI,kDAAoDwE,GAChE7C,EAAEuD,UAAUV,EAAiBQ,EACzB,SAACD,GACGhF,QAAQC,IAAI,oBACZ2B,EAAEiD,SAASG,IAAMA,GAErB,SAACjF,GACGC,QAAQoF,KAAK,0BAQjCxD,EAAEyD,SAGNC,KAAO,SAAC1D,GAMJ,GALKA,EAAEhB,MAAMkD,QAETlC,EAAE2D,MAAM3D,EAAE4D,QAAS,EAAG,GAGtB5D,EAAEiD,SAASG,IAAK,CAEhB,IAAIS,EAAO7D,EAAEiD,SAASG,IAAIU,MAAOC,EAAO/D,EAAEiD,SAASG,IAAIY,OACvDhE,EAAE2D,MAAM3D,EAAEiD,SAASG,KACdpD,EAAE7C,MAAM8G,KAAOjE,EAAEhB,MAAMsD,MAAMuB,GAAM,EAAI7D,EAAEhB,MAAMoD,QAAUpC,EAAE7C,MAAM8G,MACjEjE,EAAE7C,MAAM8G,KAAOjE,EAAEhB,MAAMsD,MAAMyB,GAAM,EAAI/D,EAAEhB,MAAMqD,QAAUrC,EAAE7C,MAAM8G,KAClEjE,EAAEhB,MAAMsD,MAAQuB,EAChB7D,EAAEhB,MAAMsD,MAAQyB,QAIpB/D,EAAEkE,SAAyB,GAAhBlE,EAAEhB,MAAMsD,OACnBtC,EAAEkD,KAAK,SAAMlD,EAAEiD,SAASC,KAAO,SACflD,EAAEhB,MAAMoD,QAAQhB,QAAQ,GAAK,IAC7BpB,EAAEhB,MAAMqD,QAAQjB,QAAQ,GAAK,WAC3BpB,EAAEhB,MAAMsD,MAAMlB,QAAQ,GAAK,WACzCpB,EAAE7C,MAAM8G,KAAK,EAAKjE,EAAEhB,MAAMoD,QAAUpC,EAAE7C,MAAM8G,KAC5CjE,EAAE7C,MAAM8G,KAAK,EAAKjE,EAAEhB,MAAMqD,QAAUrC,EAAE7C,MAAM8G,KAC5C,IAAK,KAGTjE,EAAEhB,MAAMkD,QAERlC,EAAE2D,MAAM3D,EAAE4D,QAAS,EAAG,KCVnBO,EApEW,CACtB/D,KAAO,OACP6B,QAAUV,EAAcwB,aAExBC,QAAU,SAAChD,GACPA,EAAEiD,SAASmB,KAAOpE,EAAEqE,YAAYrE,EAAE7C,MAAM8G,KAAMjE,EAAE7C,MAAM8G,MACtDjE,EAAEiD,SAASC,KAAO,WAGtBC,QAAU,SAACnD,GAOP,GANAA,EAAEyD,QAGFX,EAAYK,QAAQnD,GAGhBA,EAAEiD,SAASG,IAAK,CAChB,IAAIS,EAAO7D,EAAEiD,SAASG,IAAIU,MAAOC,EAAO/D,EAAEiD,SAASG,IAAIY,OAEvDhE,EAAE2D,MAAM3D,EAAEiD,SAASG,KACdpD,EAAE7C,MAAM8G,KAAOjE,EAAEhB,MAAMsD,MAAMuB,GAAM,EAAI7D,EAAEhB,MAAMoD,QAAUpC,EAAE7C,MAAM8G,MACjEjE,EAAE7C,MAAM8G,KAAOjE,EAAEhB,MAAMsD,MAAMyB,GAAM,EAAI/D,EAAEhB,MAAMqD,QAAUrC,EAAE7C,MAAM8G,KAClEjE,EAAEhB,MAAMsD,MAAQuB,EAChB7D,EAAEhB,MAAMsD,MAAQyB,GAGpB,IAAIO,EAAQtE,EAAE7C,MAAM8G,KAAOjE,EAAE7C,MAAM8G,KAAO,EAG1C,GAFAjE,EAAEuE,aACFvE,EAAEiD,SAASmB,KAAKG,aACXvE,EAAEhB,MAAMkD,OAOT,IAAK,IAAIsC,EAAI,EAAGA,EAAIF,EAAOE,IACvBxE,EAAEiD,SAASmB,KAAKK,OAAOD,GAAK,IAAMxE,EAAEyE,OAAOD,QAP/C,IAAK,IAAIA,EAAI,EAAGA,EAAIF,EAAOE,IACvBxE,EAAEiD,SAASmB,KAAKK,OAAOD,GAAKxE,EAAEyE,OAAOD,GAS7CxE,EAAEiD,SAASmB,KAAKM,eAEpB1E,EAAEyD,SAGNC,KAAO,SAAC1D,GACAA,EAAEiD,SAASG,KAEXpD,EAAE4D,QAAQQ,KAAKpE,EAAEiD,SAASmB,MAG1BpE,EAAE2D,MAAM3D,EAAE4D,QAAS,EAAG,KAGtB5D,EAAE2D,MAAM3D,EAAE4D,QAAS,EAAG,GAGtB5D,EAAEkE,SAAyB,GAAhBlE,EAAEhB,MAAMsD,OACnBtC,EAAEkD,KAAK,SAAMlD,EAAEiD,SAASC,KAAO,SACflD,EAAEhB,MAAMoD,QAAU,IAAMpC,EAAEhB,MAAMqD,QAAU,WACzCrC,EAAEhB,MAAMsD,MAAQ,WAC7BtC,EAAE7C,MAAM8G,KAAK,EAAKjE,EAAEhB,MAAMoD,QAAUpC,EAAE7C,MAAM8G,KAC5CjE,EAAE7C,MAAM8G,KAAK,EAAKjE,EAAEhB,MAAMqD,QAAUrC,EAAE7C,MAAM8G,KAC5C,IAAK,QC2BNU,6MAhCXC,sBAAwB,SAAChH,GACrBR,EAAKD,MAAMsE,SAASoD,aAAajH,EAAMC,OAAOC,UAGlD6D,qBAAuB,SAAC/D,GACpBR,EAAKD,MAAMsE,SAASqD,mBAAmBlH,EAAMC,OAAOgE,kFAIpD,OACI/B,EAAA,qBAAKS,UAAU,YACXT,EAAA,qBAAKS,UAAU,gBACXT,EAAA,qBAAKS,UAAU,gBACXT,EAAA,qBAAKS,UAAU,kBAAf,OACAT,EAAA,uBAAOI,KAAK,WAAWK,UAAU,0BAC7BsB,QAAStE,KAAKJ,MAAM8E,QAAQ8C,WAAY1E,SAAU9C,KAAKoE,wBAE/D7B,EAAA,qBAAKS,UAAU,8BAAf,oBCvETyE,EDuES,KACAlF,EAAA,qBAAKS,UAAU,8BAAf,IAA8ChD,KAAKJ,MAAM8E,QAAQgD,UAAjE,MAEJnF,EAAA,qBAAKS,UAAU,mBACXT,EAAA,qBAAKS,UAAU,iBACXT,EAAA,0BAAUS,UAAU,YACZzC,MAAOP,KAAKJ,MAAM8E,QAAQiD,SAC1B7E,SAAU9C,KAAKqH,qEAjDvC,MAL+B,CAC3BM,SAAW,GACXD,UAAY,kBACZF,YAAa,uCAKDxC,GAUhB,MATqC,CACjCsC,aAAc,SAACM,GACX5C,EAAG5D,SAAS,CAAEuG,SAAUC,KAG5BL,mBAAoB,SAACM,GACjB7C,EAAG5D,SAAS,CAAEoG,WAAYK,8CAMd7C,GAMpB,MAL8B,CAC1B2C,SAAW3C,EAAGvD,MAAMkG,SACpBD,UAAW1C,EAAGvD,MAAMiG,UACpBF,WAAYxC,EAAGvD,MAAM+F,iDAjCzB,MAAO,CACHrC,cAAgBiC,EAAajC,cAC7BC,YAAcgC,EAAahC,YAC3BC,gBAAkB+B,EAAa/B,wBALhBpC,aClBrB6E,EAAyB,IACzBL,EAAmC,QAsCzC,SAASM,EAAaC,EAAkBC,GACpC,IAAIC,EA3BR,SAA8BC,GAC1B,IAAIC,EAA0B,CAC1BC,aAAa,EACbC,YAAa,EACbC,WAAOC,GAgBX,OAdAJ,EAAQE,YAAcG,OAAOC,WACzB,SAASC,GACL9H,QAAQC,IAAI,sDACZ6H,EAAEN,aAAc,GACjBP,EAAeM,GACtBA,EAAQG,MAAQ,IAAIK,MAAMT,EAC1B,CACIU,IAAK,SAASvI,EAAcwI,EAAUC,GAClC,GAAIX,EAAQC,YACR,MAAMW,UAAU,6CAA+ClB,EAAgB,SAEnF,OAAOxH,EAAOwI,MAGfV,EAOWa,CAAqBhB,GACvC,IAOIiB,SAASzB,EACL,kBACOO,EAAW,KAFtBkB,CAE4BhB,EAAYK,OAE5C,MAAO3H,GAGH,MAFA6H,OAAOU,aAAajB,EAAYI,aAE1B1H,EAEV,OAAOsH,EAKX,IA6CekB,EA7CW,CACtBvG,KAAO,OACP6B,QAAU0C,EAAa5B,aAEvBC,QAAU,SAAChD,EAAY4G,GACnB5G,EAAEiD,SAAS4D,QAAU,GACrB7G,EAAEiD,SAAS6D,WAAY,EAEvB9G,EAAEiD,SAAS8D,YAAc,SAASC,GAC9BJ,EAAMjI,SAAS,CAAEsG,UAAY+B,MAIrC7D,QAAU,SAACnD,GACPA,EAAEyD,SAGNC,KAAO,SAAC1D,GAMJ,GAJAA,EAAE2D,MAAM3D,EAAE4D,QAAS,EAAG,GAIlB5D,EAAEhB,MAAMkG,WAAalF,EAAEiD,SAAS4D,SAAW7G,EAAEiD,SAAS6D,UAEtD,GAAI9G,EAAEhB,MAAM+F,YAAc/E,EAAEhB,MAAMkG,UAAYlF,EAAEhB,MAAMkG,SAASnH,OAAS,EAAG,CACvE,IACI,IAAI4H,EAAUL,EAAatF,EAAEhB,MAAMkG,SAAUlF,GAC7CgG,OAAOU,aAAaf,EAAQE,aAC5B7F,EAAEiD,SAAS6D,WAAY,EACvB9G,EAAEiD,SAAS8D,YAAY,mBAE3B,MAAO5I,GACH6B,EAAEiD,SAAS6D,WAAY,EACvB9G,EAAEiD,SAAS8D,YAAY5I,EAAI8I,SAE/BjH,EAAEiD,SAAS4D,QAAU7G,EAAEhB,MAAMkG,cAG7BlF,EAAEiD,SAAS8D,YAAY,qBC/FvC,SAASG,EACLC,EACAC,GACA,OAAO,SAASxJ,GACZwJ,EAAeD,EAAKvJ,EAAMC,OAAOC,QAIzC,ICbYuB,EDqDGgI,EAxCiC,SAAClK,GAC7C,GAAIA,EAAMmK,QAAUnK,EAAMoK,KAAOpK,EAAMqK,OAASrK,EAAMmK,OAAOvJ,OAGzD,OAFAK,QAAQK,MAAM,0DACdL,QAAQK,MAAMtB,EAAMmK,QACZxH,EAAA,uCAqBZ,SAAS2H,EAAUC,GACf,IAAIC,EAAMC,MAAMC,KAAKD,MAAMzK,EAAMqK,MAAMrI,QAAQQ,IACvC,SAACmI,GAAD,OAAkBhI,EAAA,oBAAIC,IAAK,OAAS+H,GApBhD,SAAoBJ,EAAaI,GAC7B,IAAIX,EAAMO,EAAMvK,EAAMqK,KAAOM,EACzB3G,EAAS,KAIb,OAHIhE,EAAM4K,SACN5G,EAAQrB,EAAA,qBAAKS,UAAU,kBAAkBpD,EAAM4K,OAAOZ,KAEtDhK,EAAM6K,WAAa7K,EAAM6K,UAAUb,GAE/BrH,EAAA,qBAAKS,UAAU,eACdY,EACDrB,EAAA,uBAAOC,IAAK,QAAUoH,EAAKjH,KAAK,SAASpC,MAAOX,EAAMmK,OAAOH,GACzD9G,SAAU6G,EAAiBC,EAAKhK,EAAMkD,aAI1CP,EAAA,yBAAMqB,EAAOhE,EAAMmK,OAAOH,IAKgBc,CAAWP,EAAKI,MAElE,OAAOhI,EAAA,oBAAIC,IAAK,OAAS2H,GAAMC,GAGnC,IACIO,EADUN,MAAMC,KAAKD,MAAMzK,EAAMoK,MAAMpI,QACzBQ,IACV,SAAC+H,GAAD,OAAkBD,EAAUC,KAGpC,OAAO5H,EAAA,2BAAOA,EAAA,2BAAQoI,KEyIXC,6MAnEX3G,mBAAqB,SAACpB,EAAetC,GACjCV,EAAKD,MAAMsE,SAASC,eAAetB,EAAMtC,MAG7C6D,qBAAuB,SAAC/D,GACpBR,EAAKD,MAAMsE,SAAS2G,kBAAkBxK,EAAMC,OAAOgE,YAGvDwG,mBAAqB,SAAClB,EAAcmB,GAEhClK,QAAQC,IAAI,mCAAqC8I,EAAM,MAAQmB,GAE/D,IAAIC,EAAYX,MAAMC,KAAKzK,EAAKD,MAAM8E,QAAQuG,QAC9CD,EAAUpB,GAAO7F,WAAWgH,GAC5B,IAAIG,EAAUb,MAAMC,KAAKzK,EAAKD,MAAM8E,QAAQyG,YAC5CD,EAAQtB,GAAOmB,EACflL,EAAKD,MAAMsE,SAASkH,mBAAmBF,GACvCrL,EAAKD,MAAMsE,SAASmH,oBAAoBL,4EAIxC,IAAIM,EAAkB,GAClBC,EAAa,GA4BjB,OA1BIA,EADAvL,KAAKJ,MAAM8E,QAAQyG,WACNnL,KAAKJ,MAAM8E,QAAQyG,WAAWK,OAAO,CAAC,IAAK,IAAK,MAGhDxL,KAAKJ,MAAM8E,QAAQuG,OAAO7I,IACnC,SAACqJ,GAAD,OAAaA,EAAE9K,aAAY6K,OAAO,CAAC,IAAK,IAAK,MAGjDF,EADAtL,KAAKJ,MAAM8E,QAAQgH,UACAnJ,EAAA,yBACfA,EAAA,cAACoJ,EAAD,CAAa3B,KAAM,EAAGC,KAAM,EAAGnH,SAAU9C,KAAK8K,mBACtCf,OAAQwB,EACRf,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAClCC,UAAW,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,MAIvDlI,EAAA,yBACfA,EAAA,cAACqC,EAAD,CAAehB,MAAM,cAAcf,KAAK,aAAatC,MAAOP,KAAKJ,MAAM8E,QAAQkH,WAAY9I,SAAU9C,KAAKiE,mBAAoBT,KAAM,EAAGC,IAAK,EAAGE,MAAM,MACrJpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,cAAcf,KAAK,aAAatC,MAAOP,KAAKJ,MAAM8E,QAAQmH,WAAY/I,SAAU9C,KAAKiE,mBAAoBT,KAAM,EAAGC,IAAK,EAAGE,MAAM,MACrJpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,UAAUf,KAAK,SAAStC,MAAOP,KAAKJ,MAAM8E,QAAQoH,OAAQhJ,SAAU9C,KAAKiE,mBAAoBT,KAAM,EAAGC,IAAK,EAAGE,MAAM,MACzIpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,UAAUf,KAAK,SAAStC,MAAOP,KAAKJ,MAAM8E,QAAQqH,OAAQjJ,SAAU9C,KAAKiE,mBAAoBT,KAAM,EAAGC,IAAK,EAAGE,MAAM,MACzIpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,UAAUf,KAAK,SAAStC,MAAOP,KAAKJ,MAAM8E,QAAQsH,OAAQlJ,SAAU9C,KAAKiE,mBAAoBT,KAAMyI,KAAKC,GAAG,EAAGzI,IAAKwI,KAAKC,GAAG,EAAGvI,MAAM,QACzJpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,UAAUf,KAAK,SAAStC,MAAOP,KAAKJ,MAAM8E,QAAQyH,OAAQrJ,SAAU9C,KAAKiE,mBAAoBT,KAAMyI,KAAKC,GAAG,EAAGzI,IAAKwI,KAAKC,GAAG,EAAGvI,MAAM,QACzJpB,EAAA,cAACqC,EAAD,CAAehB,MAAM,SAASf,KAAK,SAAStC,MAAOP,KAAKJ,MAAM8E,QAAQ0H,OAAQtJ,SAAU9C,KAAKiE,mBAAoBT,KAAMyI,KAAKC,GAAIzI,IAAKwI,KAAKC,GAAIvI,MAAM,SAKxJpB,EAAA,qBAAKS,UAAU,YACXT,EAAA,qBAAKS,UAAU,gBACXT,EAAA,qBAAKS,UAAU,gBACXT,EAAA,qBAAKS,UAAU,kBAAf,iBACAT,EAAA,uBAAOI,KAAK,WAAWK,UAAU,0BAC7BsB,QAAStE,KAAKJ,MAAM8E,QAAQgH,UAAW5I,SAAU9C,KAAKoE,yBAGlE7B,EAAA,qBAAKS,UAAU,mBACVsI,8CA7Hb,MAZoC,CAChCI,WAAY,EACZE,WAAa,EACbC,WAAa,EACbC,OAAS,EACTC,OAAS,EACTK,OAAS,EACTJ,OAAS,EACTG,OAAS,EACTlB,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACzBE,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,0CAK1BnG,GA2ChB,MA1C0C,CACtCb,eAAgB,SAACtB,EAAetC,GAC5B,OAAQsC,GACJ,IAAK,aACDmC,EAAG5D,SAAS,CAACwK,WAAWrL,IACxB,MACJ,IAAK,aACDyE,EAAG5D,SAAS,CAACyK,WAAWtL,IACxB,MACJ,IAAK,SACDyE,EAAG5D,SAAS,CAAC0K,OAAOvL,IACpB,MACJ,IAAK,SACDyE,EAAG5D,SAAS,CAAC2K,OAAOxL,IACpB,MACJ,IAAK,SACDyE,EAAG5D,SAAS,CAACgL,OAAO7L,IACpB,MACJ,IAAK,SACDyE,EAAG5D,SAAS,CAAC4K,OAAOzL,IACpB,MACJ,IAAK,SACDyE,EAAG5D,SAAS,CAAC+K,OAAO5L,IACpB,MACJ,QAEI,YADAM,QAAQC,IAAI,0CAA4C+B,KAKpEgI,kBAAmB,SAACa,GAChB1G,EAAG5D,SAAS,CAAEsK,UAAUA,KAG5BL,oBAAqB,SAACJ,GAClBjG,EAAG5D,SAAS,CAAE6J,OAAOA,KAGzBG,mBAAoB,SAACD,GACjBnG,EAAG5D,SAAS,CAAE+J,WAAWA,8CAMbnG,GAapB,MAZmC,CAC/B0G,UAAY1G,EAAGvD,MAAMiK,UACrBE,WAAa5G,EAAGvD,MAAMmK,WACtBC,WAAa7G,EAAGvD,MAAMoK,WACtBC,OAAS9G,EAAGvD,MAAMqK,OAClBC,OAAS/G,EAAGvD,MAAMsK,OAClBK,OAASpH,EAAGvD,MAAM2K,OAClBJ,OAAShH,EAAGvD,MAAMuK,OAClBG,OAASnH,EAAGvD,MAAM0K,OAClBlB,OAASjG,EAAGvD,MAAMwJ,OAClBE,WAAanG,EAAGvD,MAAM0J,iDAhF1B,MAAO,CACH/F,YAAkBwF,EAAkBxF,YACpCD,cAAkByF,EAAkBzF,cACpCE,gBAAkBuF,EAAkBvF,wBALhBpC,aCSjBoJ,EA1CgB,CAC3BxJ,KAAO,YACP6B,QAAUkG,EAAkBpF,aAE5BC,QAAU,SAAChD,KAIXmD,QAAU,SAACnD,GACPA,EAAEyD,QACFzD,EAAE6J,eAGNnG,KAAO,SAAC1D,GACJ,GAAIA,EAAEhB,MAAMiK,UAAW,CACnB,IAAIa,EAAM9J,EAAEhB,MAAMwJ,OAMlBxI,EAAE+J,YAAYD,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAC1D9J,EAAE2D,MAAM3D,EAAE4D,QAAS,EAAG,QAItB5D,EAAEgK,UAAUhK,EAAE7C,MAAM8G,KAAK,EAAGjE,EAAE7C,MAAM8G,KAAK,GAGzCjE,EAAEsC,MAAMtC,EAAEhB,MAAMqK,OAAQrJ,EAAEhB,MAAMsK,QAChCtJ,EAAEgK,UAAUhK,EAAEhB,MAAMmK,WAAanJ,EAAE7C,MAAM8G,KACrCjE,EAAEhB,MAAMoK,WAAapJ,EAAE7C,MAAM8G,MACjCjE,EAAEuJ,OAAOvJ,EAAEhB,MAAMuK,QACjBvJ,EAAE0J,OAAO1J,EAAEhB,MAAM0K,QACjB1J,EAAE2J,OAAO3J,EAAEhB,MAAM2K,QAGjB3J,EAAE2D,MAAM3D,EAAE4D,SAAU5D,EAAE7C,MAAM8G,KAAK,GAAIjE,EAAE7C,MAAM8G,KAAK,eFrClD5E,uFG8CG4K,cAtCX,SAAAA,EAAY9M,GAAc,IAAAC,EAGtB,IAAK,IAAI8M,KAHa7M,OAAAC,EAAA,EAAAD,CAAAE,KAAA0M,IACtB7M,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4M,GAAAvM,KAAAH,KAAMJ,KAHVgN,aAE0B,EAAA/M,EAS1BgN,gBAAkB,SAACxM,GACf,IAAI4G,EACJ,IAAKA,EAAI,EAAGA,EAAIpH,EAAK+M,QAAQpM,OAAQyG,IAC7BpH,EAAK+M,QAAQ3F,KAAO5G,EAAMC,OAAOC,OACjCV,EAAKuB,SAAS,CAAE0L,SAAWjN,EAAK+M,QAAQ3F,MAb1BpH,EAkB1BkN,UAAY,WACRlN,EAAKD,MAAMoN,MAAMnN,EAAK4B,MAAMqL,WAjB5BjN,EAAK+M,QAAU,GACD9K,EACVjC,EAAK+M,QAAQK,KAAKnL,EAAW6K,IAJX,OAMtB9M,EAAK4B,MAAQ,CAACqL,SAASjN,EAAK+M,QAAQ,IANd/M,wEAuBtB,IAAMqN,EAAalN,KAAK4M,QAAQxK,IAAI,SAAC+K,GAAD,OAC5B5K,EAAA,wBAAQhC,MAAO4M,EAAQ3K,IAAK2K,GAASA,KAE7C,OACI5K,EAAA,yBACIA,EAAA,qCACAA,EAAA,wBAAQhC,MAAOP,KAAKyB,MAAMqL,SAAUhK,SAAU9C,KAAK6M,iBAC9CK,GAEL3K,EAAA,wBAAQ6K,QAASpN,KAAK+M,WAAtB,eAnCS9J,2BCJnBoK,EAAkB,MA6BxB,SAASC,EAAYC,EAAsBJ,GAqDvC,OApDe,SAAU1K,GACrBA,EAAE7C,MAAQ2N,EAAO3N,MACjB6C,EAAEhB,MAAQ8L,EAAO9L,MACjBgB,EAAEiD,SAAW,GAEbjD,EAAE+K,QAAU,WACR/K,EAAE4D,QAAU5D,EAAEqE,YAAYrE,EAAE7C,MAAM8G,KAAMjE,EAAE7C,MAAM8G,MAGhDyG,EAAO1H,QAAQhD,EAAG8K,IAGtB9K,EAAEgL,MAAQ,WACNhL,EAAEiL,aAAa,GACfjL,EAAEkL,aAAalL,EAAE7C,MAAM8G,KAAMjE,EAAE7C,MAAM8G,KAAM2G,IA2B/C5K,EAAE0D,KAAO,YAxBT,WAEI1D,EAAEhB,MAAQ8L,EAAO9L,MAGjB,IAAIsF,EAAQtE,EAAE7C,MAAM8G,KAAOjE,EAAE7C,MAAM8G,KAAO,EAE1C,GADAjE,EAAE4D,QAAQW,aACNvE,EAAEhB,MAAMmM,WACR,IAAK,IAAI3G,EAAI,EAAGA,EAAIF,EAAOE,IACvBxE,EAAE4D,QAAQa,OAAOD,GAAKxE,EAAEhB,MAAMmM,WAAW3G,QAK7C,IAAK,IAAIA,EAAI,EAAGA,EAAIF,EAAOE,IACvBxE,EAAE4D,QAAQa,OAAOD,GAAK,EAG9BxE,EAAE4D,QAAQc,eAGVgG,EAAOvH,QAAQnD,GAIfmD,GAGAuH,EAAOhH,KAAK1D,GAGZA,EAAEuE,aACFuG,EAAOM,SAASC,kBAAkBxD,KAAK7H,EAAEyE,eAqItC6G,cAtHX,SAAAA,EAAYnO,GAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+N,IACvBlO,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiO,GAAA5N,KAAAH,KAAMJ,KALVoO,gBAI2B,EAAAnO,EAH3BoO,YAG2B,EAAApO,EAF3BsN,YAE2B,EAAAtN,EAW3BqO,wBAA0B,SAAChH,GACnBA,EACArH,EAAKuB,SAAS,CAAEwM,WAAY1G,IAI5BrH,EAAKuB,SAAS,CAAEwM,WAAY/N,EAAKmO,cAjBdnO,EAqB3BsO,0BAA4B,SAAC9N,GACrBR,EAAKD,MAAMwO,UACXvO,EAAKD,MAAMwO,SAASvO,EAAKD,MAAMgK,MAvBZ/J,EA2B3BwO,wBAA0B,SAAChO,GACnBR,EAAKoO,QACLpO,EAAKoO,OAAOK,WArCb,SAqC2CxO,OAAAyO,EAAA,EAAAzO,CAAAD,GArC7BD,MAAM8G,KAAO,WAQP7G,EAiC3B2O,oBAAsB,SAACnO,GACfR,EAAKD,MAAM6O,QACX5O,EAAKD,MAAM6O,OAAO5O,EAAKD,MAAMgK,IAAK,IAnCf/J,EAuC3B6O,sBAAwB,SAACrO,GACjBR,EAAKD,MAAM6O,QACX5O,EAAKD,MAAM6O,OAAO5O,EAAKD,MAAMgK,KAAM,IAzChB/J,EA6C3BgO,SAAW,SAAC3G,GAGRrH,EAAKD,MAAM+O,YAAY9O,EAAKD,MAAMgK,IAAK1C,IAhDhBrH,EAoD3B+O,YAAc,WACV,MAAO,gBAAkB/O,EAAKD,MAAMiP,kBAAkBrM,KAnDtD3C,EAAKmO,WAAa,IAAIF,kBAAkBjO,EAAKD,MAAM8G,KAAO7G,EAAKD,MAAM8G,KAAO,GAC5E7G,EAAKD,MAAMiP,kBAAkBC,gBAAkBjP,EAAKqO,wBACpDrO,EAAKsN,OJ9EN,SAAmB4B,GACtB,OAAQA,GACJ,KAAKjN,EAAWE,MACZ,OAAOuD,EACX,KAAKzD,EAAWC,KACZ,OAAO6E,EACX,KAAK9E,EAAWkN,KACZ,OAAO5F,EACX,KAAKtH,EAAWmN,UACZ,OAAO5C,EACX,QAEI,OADAxL,QAAQoF,KAAK,+BAAiC8I,EAAK,+BAC5CxJ,GIkEG2J,CAAUrP,EAAKD,MAAM+C,MACnC9C,EAAK4B,MAAL3B,OAAAqP,EAAA,EAAArP,CAAA,GACOD,EAAKsN,OAAOzI,QAAQS,iBAE3BtF,EAAKoO,YAASzF,EARS3I,mFAyDvBG,KAAKiO,OAAS,IAAIxF,OAAO2G,GAAG9B,EAAYtN,KAAMA,KAAKmN,QAASkC,SAASC,eAAetP,KAAK4O,+DAKrF5O,KAAKiO,QACLjO,KAAKiO,OAAOsB,0CAKhB,IAAIC,EAAWjN,EAAA,qBAAKS,UAAU,aAC9B,OAAQhD,KAAKJ,MAAM+C,MACf,KAAKb,EAAWE,MAChB,KAAKF,EAAWC,KACZyN,EACIjN,EAAA,cAACkN,EAAD,CAAe/K,QAAS1E,KAAKmN,OAAOzI,QAAQW,gBAAgBrF,MAAOkE,SAAUlE,KAAKmN,OAAOzI,QAAQU,YAAYpF,MAAO6B,iBAAkB7B,KAAKJ,MAAM+C,OAErJ,MACJ,KAAKb,EAAWkN,KACZQ,EACIjN,EAAA,cAACmN,EAAD,CAAchL,QAAS1E,KAAKmN,OAAOzI,QAAQW,gBAAgBrF,MAAOkE,SAAUlE,KAAKmN,OAAOzI,QAAQU,YAAYpF,QAEhH,MACJ,KAAK8B,EAAWmN,UACZO,EACIjN,EAAA,cAACoN,EAAD,CAAmBjL,QAAS1E,KAAKmN,OAAOzI,QAAQW,gBAAgBrF,MAAOkE,SAAUlE,KAAKmN,OAAOzI,QAAQU,YAAYpF,QAErH,MACJ,QACIa,QAAQK,MAAM,8DAItB,OACIqB,EAAA,qBAAKS,UAAU,mBAAmB4M,GAAI,mBAAmB5P,KAAKJ,MAAMiP,kBAAkBrM,KAClFD,EAAA,qBAAKS,UAAU,gBACXT,EAAA,wBAAQS,UAAU,iBACdoK,QAASpN,KAAKwO,oBACdqB,SAAU7P,KAAKJ,MAAMkQ,QAFzB,UAGAvN,EAAA,yBACAA,EAAA,6BAAOvC,KAAKJ,MAAMgK,IAAM,EAAxB,KAAiCrH,EAAA,yBAAMvC,KAAKmN,OAAOtK,MACnDN,EAAA,wBAAQS,UAAU,qBACdoK,QAASpN,KAAKqO,yBADlB,QAEA9L,EAAA,wBAAQS,UAAU,uBACdoK,QAASpN,KAAKmO,2BADlB,UAEA5L,EAAA,yBACAA,EAAA,wBAAQS,UAAU,mBACdoK,QAASpN,KAAK0O,sBACdmB,SAAU7P,KAAKJ,MAAMmQ,SAFzB,WAIJxN,EAAA,qBAAKS,UAAU,iBACXT,EAAA,qBAAKS,UAAU,mBAAmB4M,GAAI5P,KAAK4O,iBAE9CY,UApHSvM,iBCuBX+M,cAhGX,SAAAA,EAAYpQ,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgQ,IACnBnQ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkQ,GAAA7P,KAAAH,KAAMJ,KAJVqQ,QAAmB,EAGIpQ,EAFvBqQ,QAAqC,GAEdrQ,EAKvBsQ,SAAW,SAACpB,GACR,IAAMqB,EAAYvQ,EAAK4B,MAAM4O,OAAO7E,OAAO,CACnC7I,KAAKoM,EACLvM,IAAI3C,EAAKoQ,QACTnB,gBAAgB,eAExBjP,EAAKoQ,UACLpQ,EAAKqQ,QAAQjD,KAAK,IAAIa,kBAAkBjO,EAAKD,MAAM0Q,WAAazQ,EAAKD,MAAM0Q,WAAa,IACxFzQ,EAAKuB,SAAS,CAAEiP,OAASD,KAbNvQ,EAgBvB0Q,gBAAkB,SAACC,EAAsBtJ,GACrCrH,EAAKqQ,QAAQM,GAAetJ,EACxBsJ,EAAc3Q,EAAK4B,MAAM4O,OAAO7P,OAAS,GAC3CX,EAAK4B,MAAM4O,OAAOG,EAAY,GAAG1B,gBAAgB5H,IAnBhCrH,EAwBvB4Q,gBAAkB,SAAC1B,GACflP,EAAKsQ,SAASpB,IAzBKlP,EA4BvB6Q,mBAAqB,SAACF,GAClB,GAAIA,EAAc,GAAKA,GAAe3Q,EAAK4B,MAAM4O,OAAO7P,OACtDK,QAAQK,MAAM,oCAAsCsP,OADtD,CAIIA,EAAc3Q,EAAK4B,MAAM4O,OAAO7P,OAAS,IACvCgQ,EAAc,EAChB3Q,EAAK4B,MAAM4O,OAAOG,EAAY,GAAG1B,gBAAgBjP,EAAKqQ,QAAQM,EAAY,IAG1E3Q,EAAK4B,MAAM4O,OAAOG,EAAY,GAAG1B,mBAGrCjP,EAAKqQ,QAAQS,OAAOH,EAAa,GACjC,IAAMJ,EAAYvQ,EAAK4B,MAAM4O,OAAOO,MAAM,EAAEJ,GAAahF,OAAO3L,EAAK4B,MAAM4O,OAAOO,MAAMJ,EAAY,IACpG3Q,EAAKuB,SAAS,CAAEiP,OAASD,MA3CNvQ,EA8CnBgR,iBAAmB,SAACL,EAAsBM,GAC1C,IAAIC,EAAWP,EAAcM,GACxBC,EAAW,GAAKA,GAAYlR,EAAK4B,MAAM4O,OAAO7P,SACjDK,QAAQK,MAAM,qBAAuBsP,EAAc,gBAAkBO,GAEvE,IAAMX,EAAYvQ,EAAK4B,MAAM4O,OAAOO,QAChCI,EAAUZ,EAAUO,OAAOH,EAAa,GAAG,GAI/C,OAHAJ,EAAUO,OAAOI,EAAU,EAAGC,GAE9BnR,EAAKuB,SAAS,CAAEiP,OAASD,IAClBW,GAtDPlR,EAAK4B,MAAQ,CAAE4O,OAAS,IAFLxQ,mFA4DnBG,KAAKmQ,SAASrO,EAAWE,oDAIrBhC,KAAKyB,MAAM4O,OAAO7P,OAAS,GAC3BR,KAAKyB,MAAM4O,OAAO,GAAGvB,mDAIpB,IAAAmC,EAAAjR,KACCkR,EAAYlR,KAAKyB,MAAM4O,OAAOjO,IAAI,SAACiH,EAAO8H,GAAR,OACpC5O,EAAA,cAAC6O,EAAD,CAAa5O,IAAK6G,EAAM7G,IAAKG,KAAM0G,EAAM1G,KAAM+D,KAAMuK,EAAKrR,MAAM0Q,WAAY1G,IAAKuH,EAC7EtC,kBAAmBxF,EACnBsF,YAAasC,EAAKV,gBAClBnC,SAAU6C,EAAKP,mBACfjC,OAAQwC,EAAKJ,iBACbd,QAAoB,IAAVoB,EACVrB,OAASqB,IAAUF,EAAKxP,MAAM4O,OAAO7P,OAAO,MAEpD,OACI+B,EAAA,qBAAKC,IAAKxC,KAAKJ,MAAM0Q,WAAYtN,UAAU,eACvCT,EAAA,yBACIA,EAAA,cAAC8O,EAAD,CAAYrE,MAAOhN,KAAKyQ,kBAC5BlO,EAAA,yBACAA,EAAA,qBAAKS,UAAU,kBACfT,EAAA,qBAAKS,UAAU,qBACfT,EAAA,qBAAKS,UAAU,eACVkO,GAEL3O,EAAA,qBAAKS,UAAU,8BA7FNC,aC4BVqO,cAjCX,SAAAA,EAAY1R,GAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsR,IACvBzR,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwR,GAAAnR,KAAAH,KAAMJ,KAMV2R,aAAe,SAAClR,GACZ,IAAImR,EAAUC,SAAS5R,EAAK4B,MAAMiQ,iBAC9BF,GACA3R,EAAKD,MAAM+R,aAAaH,GAE5BnR,EAAMuR,kBAZiB/R,EAe3BgS,mBAAqB,SAACxR,GAClBR,EAAKuB,SAAS,CAAEsQ,gBAAiBrR,EAAMC,OAAOC,SAd9CV,EAAK4B,MAAQ,CACTiQ,gBAAiBI,EAAoBnR,YAHlBd,wEAoBvB,OACI0C,EAAA,qBAAKS,UAAU,iBACXT,EAAA,sBAAMwP,SAAU/R,KAAKuR,cACrBhP,EAAA,2CACAA,EAAA,uBAAOI,KAAK,SAASa,IAAK,EAAGC,IAAKuO,EAAiBzR,MAAOP,KAAKyB,MAAMiQ,gBACjE5O,SAAU9C,KAAK6R,qBACnBtP,EAAA,uBAAOI,KAAK,SAASpC,MAAM,mBA3BhB0C,aCRd6O,EAAsB7F,KAAKgG,IAAI,EAAG,GAClCD,EAAkB/F,KAAKgG,IAAI,EAAG,IAgC5BC,cAzBX,SAAAA,EAAYtS,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkS,IACnBrS,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoS,GAAA/R,KAAAH,KAAMJ,KAIVuS,iBAAmB,SAACC,GACZA,EAAU,GAAKA,GAAWJ,EAC1BnS,EAAKuB,SAAS,CAACkP,WAAa8B,IAG5BvR,QAAQK,MAAM,kBAAoBkR,EAAU,0BAA4BJ,EAAkB,OAR9FnS,EAAK4B,MAAQ,CAAE6O,WAAawB,GAFTjS,wEAenB,OACIwS,EAAAC,EAAAC,cAAA,OAAKvP,UAAU,OACXqP,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACC,EAAD,CAAcb,aAAc3R,KAAKmS,mBACjCE,EAAAC,EAAAC,cAACE,EAAD,CAAYnC,WAAYtQ,KAAKyB,MAAM6O,qBApBjCrN,IAAMyP,WCAJC,QACW,cAA7BlK,OAAOmK,SAASC,UAEe,UAA7BpK,OAAOmK,SAASC,UAEhBpK,OAAOmK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAS5D,SAASC,eAAe,SDmI3C,kBAAmB4D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c1586037.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {EffectType} from '../effects/Effect';\r\n\r\nenum SourceType {\r\n    BuiltIn = \"built-in\",\r\n    LocalFile = \"local-file\",\r\n    URL = \"url\",\r\n}\r\n\r\ninterface Props {\r\n    onSourceChange : (url:string) => void;\r\n    parentEffectType ?: EffectType;\r\n}\r\n\r\ninterface State {\r\n    selectedType : SourceType;\r\n    selectedBuiltIn : string;\r\n}\r\n\r\nfunction prettySource(s : SourceType): string {\r\n    switch (s) {\r\n        case SourceType.BuiltIn:\r\n            return \"Built-in\";\r\n        case SourceType.LocalFile:\r\n            return \"Local file\";\r\n        case SourceType.URL:\r\n            return \"URL\";\r\n        default:\r\n            return \"unknown source type\";\r\n    }\r\n}\r\n\r\ninterface BuiltIns {\r\n    [x:string] : string;\r\n}\r\n\r\nconst BUILT_INS : BuiltIns = {\r\n    \"Yuratzu of Pain (167 x 173px)\" : \"assets/yuratzu.png\",\r\n    \"Mask Circle (radius 128px)\"    : \"assets/circle-alpha-512.png\",\r\n    \"Mask Square (side 256px)\"      : \"assets/square-alpha-512.png\",\r\n};\r\n\r\nclass SourceSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        let st  = SourceType.BuiltIn;\r\n        let sbi = Object.keys(BUILT_INS)[0];\r\n\r\n        switch (this.props.parentEffectType) {\r\n            case EffectType.Mask:\r\n                st  = SourceType.BuiltIn;\r\n                sbi = Object.keys(BUILT_INS)[1]; // circle mask\r\n                break;\r\n            case EffectType.Image:\r\n                st  = SourceType.LocalFile;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.state = {\r\n            selectedType: st,\r\n            selectedBuiltIn : sbi,\r\n        };\r\n    }\r\n\r\n    handleURLInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value && event.target.value.length > 0) {\r\n            try {\r\n                this.props.onSourceChange((new URL(event.target.value)).toString());\r\n            }\r\n            catch (err){\r\n                console.log(\"SourceSelector: could not interpret URL\");\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFileInputChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files != null && event.target.files.length > 0) {\r\n            this.props.onSourceChange(URL.createObjectURL(event.target.files[0]));\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: file invalid\");\r\n        }\r\n    }\r\n\r\n    handleBuiltInChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (event.target.value in BUILT_INS) {\r\n            this.setState({selectedBuiltIn : event.target.value});\r\n            this.props.onSourceChange(BUILT_INS[event.target.value]);\r\n        }\r\n        else {\r\n            console.error(\"SourceSelector: built-in doesn't exist: \" + event.target.value);\r\n        }\r\n    };\r\n\r\n    handleSourceTypeChange = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({selectedType:event.target.value as SourceType});\r\n        if (event.target.value === SourceType.BuiltIn) {\r\n            // load selected built-in immediately\r\n            this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n        }\r\n        else {\r\n            // clear source selection\r\n            this.props.onSourceChange(\"\");\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        switch (this.state.selectedType) {\r\n            case SourceType.BuiltIn:\r\n                // if default builtin, notify to load\r\n                this.props.onSourceChange(BUILT_INS[this.state.selectedBuiltIn]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const typeList = Object.keys(SourceType).map(k => {\r\n                let t = SourceType[k as any];\r\n                return (<option value={t} key={t}>{prettySource(t as SourceType)}</option>);\r\n            });\r\n\r\n        let subSelector;\r\n        switch (this.state.selectedType) {\r\n            case SourceType.LocalFile:\r\n                subSelector = (\r\n                    <input type=\"file\" accept=\"image/*\" name=\"src-file\"\r\n                        onChange={this.handleFileInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.URL:\r\n                subSelector = (\r\n                    <input type=\"url\" name=\"src-url\"\r\n                        onChange={this.handleURLInputChange}/>\r\n                    );\r\n                break;\r\n            case SourceType.BuiltIn:\r\n                let subList = Object.keys(BUILT_INS).map(k => {\r\n                    return (<option value={k} key={k}>{k}</option>);\r\n                });\r\n                subSelector = (\r\n                    <select name=\"src-builtin\" value={this.state.selectedBuiltIn}\r\n                        onChange={this.handleBuiltInChange}>\r\n                        {subList}\r\n                    </select>\r\n                    );\r\n                break;\r\n            default:\r\n                subSelector = (<div>unknown source type {this.state.selectedType}</div>);\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"source-select\">\r\n                <div className=\"source-select-type\">\r\n                    <select value={this.state.selectedType} onChange={this.handleSourceTypeChange}>\r\n                        {typeList}\r\n                    </select>\r\n                </div>\r\n                <div className=\"source-select-sub\">\r\n                    {subSelector}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SourceSelector;\r\n","import * as React from 'react';\r\n\r\nconst INCS = 200;  // number of increments for slider\r\n\r\ninterface SliderProps {\r\n    label: string;\r\n    name: string;\r\n    value: number;\r\n    onChange: (s: string, v: number) => void;\r\n\r\n    max: number;\r\n    min: number;\r\n    units?: string;\r\n}\r\n\r\nfunction handleIncrementChange( \r\n        onValueChange : (s: string, v: number) => void,\r\n        valMin:number, valMax:number) {\r\n    return function(event : React.ChangeEvent<HTMLInputElement>) {\r\n        let scaledValue = valMin + (parseFloat(event.target.value) / INCS * (valMax - valMin));\r\n        return onValueChange(event.target.name, scaledValue);\r\n    };\r\n}\r\n\r\nconst ControlSlider: React.FC<SliderProps> = (props:SliderProps) => {\r\n    let scaled_value = INCS * (props.value - props.min) / (props.max - props.min);\r\n    let units_div = (null);\r\n    if (props.units) {\r\n        units_div = <div className=\"controls-units\">{props.units ? props.units : \"\"}</div>;\r\n    }\r\n    return (\r\n        <div className=\"controls-bar\">\r\n            <div className=\"controls-label\">{props.label}</div>\r\n            <div className=\"controls-label\">{props.value.toFixed(2)}</div>\r\n            {units_div}\r\n            <input type=\"range\" name={props.name} value={scaled_value} className=\"control\"\r\n                min={0} max={INCS} onChange={handleIncrementChange(props.onChange, props.min, props.max)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlSlider;\r\n","import * as React from 'react';\r\nimport EffectLayer from './EffectLayer';\r\nimport {EffectType, ControlComponent} from '../effects/Effect';\r\nimport SourceSelector from './SourceSelector';\r\nimport ControlSlider from './ControlSlider';\r\n\r\nconst MAX_SCALE = 5;\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface ImageControlState {\r\n    xoffset : number;\r\n    yoffset : number;\r\n    scale : number;\r\n\r\n    src?: string;\r\n    invert : boolean;\r\n}\r\n\r\nexport interface ImageControlHandlers {\r\n    onSliderChange: (name:string, value:number) => void;\r\n    onInvertChange: (value:boolean) => void;\r\n    onSourceChange: (url:string) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : ImageControlState,\r\n    handlers : ImageControlHandlers,\r\n\r\n    parentEffectType ?: EffectType;\r\n}\r\n\r\nclass ImageControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : ImageControls.getFreshState,\r\n            getHandlers : ImageControls.getHandlers,\r\n            getControlState : ImageControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : ImageControlState = {\r\n            xoffset : 0,\r\n            yoffset : 0,\r\n            scale : 1,\r\n\r\n            invert : false,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : ImageControlHandlers = {\r\n            onSliderChange: (name : string, value : number) => {\r\n                if (name === \"xoffset\") {\r\n                    el.setState({ xoffset:value });\r\n                }\r\n                else if (name === \"yoffset\") {\r\n                    el.setState({ yoffset:value });\r\n                }\r\n                else if (name === \"scale\") {\r\n                    el.setState({ scale:value});\r\n                }\r\n                else {\r\n                    console.log(\"ImageEffect: unknown slider change \" + name);\r\n                }\r\n            },\r\n\r\n            onInvertChange: (value: boolean) => {\r\n                el.setState({ invert:value });\r\n            },\r\n\r\n            onSourceChange: (url: string) => {\r\n                el.setState({ src:url });\r\n            }\r\n        }\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : ImageControlState = {\r\n            xoffset: el.state.xoffset,\r\n            yoffset: el.state.yoffset,\r\n            scale: el.state.scale,\r\n\r\n            src: el.state.src,\r\n            invert: el.state.invert,\r\n        }\r\n        return ctrl;\r\n    };\r\n\r\n    handleSliderChange = (name : string, value : number) => {\r\n        this.props.handlers.onSliderChange(name, value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onInvertChange(event.target.checked);\r\n    };\r\n\r\n    handleSourceChange = this.props.handlers.onSourceChange;\r\n\r\n    render() {\r\n        let invert_text : string = \"Invert\";\r\n        switch (this.props.parentEffectType) {\r\n            case EffectType.Image:\r\n                invert_text = \"Draw Behind\";\r\n                break;\r\n            case EffectType.Mask:\r\n                invert_text = \"Inverse Alpha\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                   <SourceSelector onSourceChange={this.handleSourceChange} parentEffectType={this.props.parentEffectType}/>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">{invert_text}</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.invert} onChange={this.handleCheckboxChange}/>\r\n                    </div>\r\n                    <ControlSlider label=\"X offset\" name=\"xoffset\" value={this.props.control.xoffset}\r\n                        onChange={this.handleSliderChange} min={-1} max={1} units=\"x\"/>\r\n                    <ControlSlider label=\"Y offset\" name=\"yoffset\" value={this.props.control.yoffset}\r\n                        onChange={this.handleSliderChange} min={-1} max={1} units=\"x\"/>\r\n                    <ControlSlider label=\"Scale\" name=\"scale\" value={this.props.control.scale}\r\n                        onChange={this.handleSliderChange} min={0.0001} max={MAX_SCALE} units=\"x\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageControls;\r\n","import {Effect} from './Effect';\r\nimport {Sketcher} from '../components/EffectLayer';\r\nimport ImageControls from '../components/ImageControls';\r\n\r\nconst ALT_TEXT = \"load failed\\n\"\r\n                 + \"   (CORS not allowed?)\";\r\n\r\n// server that can apply the Access-Control-Allow-Origin header\r\nconst CORS_PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n// Image Effect.\r\n// Draws an image to the canvas.\r\nvar ImageEffect : Effect = {\r\n    name : \"Image\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s : Sketcher) => {\r\n        s.internal.text = \"no image\";\r\n    },\r\n\r\n    preDraw : (s : Sketcher) => {\r\n        // if image src has changed, reload\r\n        if (s.state.src && s.state.src !== s.internal.src) {\r\n            s.internal.src = s.state.src;\r\n            s.internal.img = null;\r\n\r\n            let tmpsrc = s.state.src.trim();\r\n            // these functions don't support Promises yet :(\r\n            s.loadImage(tmpsrc, (img : p5.Image) => {\r\n                s.internal.img = img;\r\n            },\r\n            (err) => {\r\n                s.internal.text = ALT_TEXT;\r\n\r\n                if (CORS_PROXY_URL) {\r\n                    // if we failed to load, try to fetch image through a CORS-friendly proxy\r\n                    console.log(\"ImageEffect: load failed, attempting via proxy \" + CORS_PROXY_URL);\r\n                    s.loadImage(CORS_PROXY_URL + tmpsrc,\r\n                        (img : p5.Image) => {\r\n                            console.log(\"retreived image.\");\r\n                            s.internal.img = img;\r\n                        },\r\n                        (err) => {\r\n                            console.warn(\"CORS proxy failed.\");\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // clear canvas\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s : Sketcher) => {\r\n        if (!s.state.invert) {\r\n            // draw base pixels to canvas\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n\r\n        if (s.internal.img) {\r\n            // draw image\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n        }\r\n        else {\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset.toFixed(2) + \",\"\r\n                          + s.state.yoffset.toFixed(2) + \")\\n\" +\r\n                   \"   x \"  + s.state.scale.toFixed(2) + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n\r\n        if (s.state.invert) {\r\n            // inverted. image drawn behind, now draw base in front\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n    },\r\n}\r\n\r\nexport default ImageEffect;\r\n","import {Effect} from './Effect';\r\nimport {Sketcher} from '../components/EffectLayer';\r\nimport ImageControls from '../components/ImageControls';\r\nimport ImageEffect from './ImageEffect';\r\n\r\nvar MaskEffect : Effect = {\r\n    name : \"Mask\",\r\n    control : ImageControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher) => {\r\n        s.internal.mask = s.createImage(s.props.size, s.props.size);\r\n        s.internal.text = \"no mask\";\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n\r\n        // load mask like any other image\r\n        ImageEffect.preDraw(s);\r\n\r\n        // when loaded, try to draw on blank and re-save as mask matching image size\r\n        if (s.internal.img) {\r\n            let imgw = s.internal.img.width, imgh = s.internal.img.height;\r\n            // draw\r\n            s.image(s.internal.img, \r\n                (s.props.size - s.state.scale*imgw)/2 + s.state.xoffset * s.props.size,\r\n                (s.props.size - s.state.scale*imgh)/2 + s.state.yoffset * s.props.size,\r\n                s.state.scale * imgw,\r\n                s.state.scale * imgh);\r\n\r\n            // copy into mask buffer\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.loadPixels();\r\n            s.internal.mask.loadPixels();\r\n            if (!s.state.invert) {\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.internal.mask.pixels[i] = s.pixels[i];\r\n                }\r\n            }\r\n            else {\r\n                // inverted; mask transparency flipped.\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.internal.mask.pixels[i] = 255 - s.pixels[i];\r\n                }\r\n            }\r\n            s.internal.mask.updatePixels();\r\n        }\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        if (s.internal.img) {\r\n            // apply mask to base pixels\r\n            s.baseImg.mask(s.internal.mask);\r\n\r\n            // draw to canvas\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n        else {\r\n            s.image(s.baseImg, 0, 0);\r\n\r\n            // placeholder text since no image is loaded\r\n            s.textSize(s.state.scale * 10);\r\n            s.text(\"「\" + s.internal.text + \"\\n\" +\r\n                   \"   (\" + s.state.xoffset + \",\" + s.state.yoffset + \")\\n\" +\r\n                   \"   x \" + s.state.scale + \"\\t」\",\r\n                s.props.size/2 + (s.state.xoffset * s.props.size), \r\n                s.props.size/2 + (s.state.yoffset * s.props.size), \r\n                200, 100);\r\n        }\r\n    },\r\n};\r\n\r\nexport default MaskEffect;\r\n","import * as React from 'react';\r\nimport EffectLayer from './EffectLayer';\r\nimport {ControlComponent} from '../effects/Effect';\r\nimport {getUserInstanceName} from '../effects/CodeEffect';\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface CodeControlState {\r\n    codeText : string;\r\n    errorText : string;\r\n    shouldEval : boolean;\r\n}\r\n\r\nexport interface CodeControlHandlers {\r\n    onCodeChange       : (code : string) => void;\r\n    onShouldEvalChange : (should : boolean) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : CodeControlState,\r\n    handlers : CodeControlHandlers,\r\n}\r\n\r\nclass CodeControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getFreshState : CodeControls.getFreshState,\r\n            getHandlers : CodeControls.getHandlers,\r\n            getControlState : CodeControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : CodeControlState = {\r\n            codeText : \"\",\r\n            errorText : \"[-------------]\",\r\n            shouldEval : false,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : CodeControlHandlers = {\r\n            onCodeChange: (code: string) => {\r\n                el.setState({ codeText: code });\r\n            },\r\n\r\n            onShouldEvalChange: (should : boolean) => {\r\n                el.setState({ shouldEval: should });\r\n            },\r\n        };\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : CodeControlState = {\r\n            codeText : el.state.codeText,\r\n            errorText: el.state.errorText,\r\n            shouldEval: el.state.shouldEval,\r\n        };\r\n        return ctrl;\r\n    };\r\n\r\n    handleTextFieldChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        this.props.handlers.onCodeChange(event.target.value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onShouldEvalChange(event.target.checked);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Run</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.shouldEval} onChange={this.handleCheckboxChange}/>\r\n                    </div>\r\n                    <div className=\"controls-bar controls-info\"> instance name: `{getUserInstanceName()}`</div>\r\n                    <div className=\"controls-bar controls-info\"> {this.props.control.errorText} </div>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    <div className=\"controls-area\">\r\n                        <textarea className=\"code-area\"\r\n                                value={this.props.control.codeText}\r\n                                onChange={this.handleTextFieldChange}></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeControls;\r\n","import {Effect} from \"./Effect\";\r\nimport EffectLayer, {Sketcher} from '../components/EffectLayer';\r\nimport CodeControls from '../components/CodeControls';\r\n\r\n// time-out for code execution\r\nconst TIME_LIMIT_MS : number = 500;\r\nconst USER_CODE_INSTANCE_NAME : string = \"pfive\";\r\n\r\nexport function getUserInstanceName() {\r\n    return USER_CODE_INSTANCE_NAME;\r\n}\r\n\r\ninterface SketchWrapper {\r\n    timeExpired: boolean;\r\n    timerHandle: number;\r\n    proxy : any;\r\n}\r\n\r\nfunction getP5InstanceWrapper(instance: p5) : SketchWrapper {\r\n    let wrapper : SketchWrapper = {\r\n        timeExpired: false,\r\n        timerHandle: 0,\r\n        proxy: undefined,\r\n    };\r\n    wrapper.timerHandle = window.setTimeout(\r\n        function(w : SketchWrapper) {\r\n            console.log(\"PaintEffect: Painting code execution time expired.\");\r\n            w.timeExpired = true;\r\n        }, TIME_LIMIT_MS, wrapper);\r\n    wrapper.proxy = new Proxy(instance,\r\n    {\r\n        get: function(target : any, property, receiver) {\r\n            if (wrapper.timeExpired) {\r\n                throw EvalError(\"Code execution time for painting expired (\" + TIME_LIMIT_MS + \" ms).\");\r\n            }\r\n            return target[property];\r\n        },\r\n    });\r\n    return wrapper;\r\n}\r\n\r\n// wrap the p5 instance.\r\n// before every p5 function call, check for timeout.\r\n// throws an error if so.\r\nfunction runInWrapper(__code__: string, __instance__: p5) {\r\n    let __wrapper__ = getP5InstanceWrapper(__instance__);\r\n    try {\r\n        // eval is dangerous.\r\n        // Instead, we could try interpreting each line as an individual p5 function call?\r\n        // It would make this much less powerful, but whatever;\r\n        // this isn't intended for complex drawing anyway.\r\n\r\n        // eslint-disable-next-line no-new-func\r\n        Function(USER_CODE_INSTANCE_NAME,\r\n            '\"use strict\";' +\r\n            '{;' + __code__ + ';}')(__wrapper__.proxy);\r\n    }\r\n    catch (err) {\r\n        window.clearTimeout(__wrapper__.timerHandle);\r\n        //console.log(\"PaintEffect: eval failed, throwing up error\");\r\n        throw err; // toss error up to be caught in draw()\r\n    }\r\n    return __wrapper__;\r\n}\r\n\r\n// Code Effect.\r\n// Allows user to input p5 commands to draw.\r\nvar CodeEffect : Effect = {\r\n    name : \"Code\",\r\n    control : CodeControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => {\r\n        s.internal.oldCode = \"\";\r\n        s.internal.codeValid = false;\r\n\r\n        s.internal.handleError = function(errorString : string) {\r\n            layer.setState({ errorText : errorString });\r\n        };\r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        // draw base pixels\r\n        s.image(s.baseImg, 0, 0);\r\n\r\n        // try to run user painting code\r\n        // only try run if valid already valid or code has changed\r\n        if (s.state.codeText !== s.internal.oldCode || s.internal.codeValid) {\r\n            // only run if we have code\r\n            if (s.state.shouldEval && s.state.codeText && s.state.codeText.length > 0) {\r\n                try {\r\n                    let wrapper = runInWrapper(s.state.codeText, s);\r\n                    window.clearTimeout(wrapper.timerHandle);\r\n                    s.internal.codeValid = true;\r\n                    s.internal.handleError(\"[no errors! :)]\");\r\n                }\r\n                catch (err) {\r\n                    s.internal.codeValid = false;\r\n                    s.internal.handleError(err.message);\r\n                }\r\n                s.internal.oldCode = s.state.codeText;\r\n            }\r\n            else {\r\n                s.internal.handleError(\"[-------------]\");\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport default CodeEffect;\r\n","import * as React from 'react';\r\n\r\ninterface MatrixTableProps {\r\n    rows: number;\r\n    cols: number;\r\n    values: Array<string>;\r\n    labels?: Array<string>;\r\n    showInput?: Array<boolean>;\r\n    onChange: (index:number, value:string) => void;\r\n}\r\n\r\nfunction handleCellChange(\r\n    ind: number,\r\n    onMatrixChange: (ind:number, val:string)=>void) {\r\n    return function(event : React.ChangeEvent<HTMLInputElement>) {\r\n        onMatrixChange(ind, event.target.value);\r\n    };\r\n}\r\n\r\nconst MatrixTable: React.FC<MatrixTableProps> = (props:MatrixTableProps) => {\r\n    if (props.values && props.rows * props.cols !== props.values.length) {\r\n        console.error(\"MatrixTable: table rows and columns don't match values\");\r\n        console.error(props.values);\r\n        return (<div>bad table.</div>);\r\n    }\r\n\r\n    function MatrixCell(row: number, col: number) {\r\n        let ind = row * props.cols + col;\r\n        let label = (null);\r\n        if (props.labels) {\r\n            label = <div className=\"controls-label\">{props.labels[ind]}</div>\r\n        }\r\n        if (props.showInput && props.showInput[ind]) {\r\n            return (\r\n                <div className=\"matrix-cell\">\r\n                {label}\r\n                <input key={\"cell-\" + ind} type=\"number\" value={props.values[ind]}\r\n                    onChange={handleCellChange(ind, props.onChange)}/>\r\n                </div>\r\n            );\r\n        }\r\n        return (<div>{label}{props.values[ind]}</div>);\r\n    }\r\n\r\n    function MatrixRow(row : number) {\r\n        let tds = Array.from(Array(props.cols).keys()).map(\r\n                (col : number) => <td key={\"col-\" + col}>{MatrixCell(row, col)}</td>\r\n            );\r\n        return <tr key={\"row-\" + row}>{tds}</tr>;\r\n    }\r\n\r\n    let rowInds = Array.from(Array(props.rows).keys());\r\n    let trs = rowInds.map(\r\n            (row : number) => MatrixRow(row)\r\n        );\r\n\r\n    return <table><tbody>{trs}</tbody></table>;\r\n}\r\n\r\nexport default MatrixTable;\r\n","import EffectLayer, {Sketcher} from \"../components/EffectLayer\";\r\nimport ImageEffect from './ImageEffect';\r\nimport MaskEffect from './MaskEffect';\r\nimport CodeEffect from './CodeEffect';\r\nimport TransformEffect from './TransformEffect';\r\n\r\nexport enum EffectType {\r\n    Image = \"image\",\r\n    Mask = \"mask\",\r\n    Code = \"code\",\r\n    Transform = \"transform\",\r\n}\r\n\r\nexport interface ControlComponent {\r\n    getFreshState: ()=>any;\r\n    getHandlers: (el:EffectLayer)=>any;\r\n    getControlState: (el:EffectLayer)=>any;\r\n}\r\n\r\nexport interface Effect {\r\n    name : string;\r\n    control : ControlComponent; // ControlComponent, but static interfaces don't exist\r\n    preLoad : (s:Sketcher, layer:EffectLayer) => void; // one-time initialization\r\n    preDraw : (s:Sketcher) => void; // prepare to draw; usually clear canvas\r\n    draw : (s:Sketcher) => void;    // draw the effect to the canvas\r\n}\r\n\r\nexport function getEffect(et : EffectType) {\r\n    switch (et) {\r\n        case EffectType.Image:\r\n            return ImageEffect;\r\n        case EffectType.Mask:\r\n            return MaskEffect;\r\n        case EffectType.Code:\r\n            return CodeEffect;\r\n        case EffectType.Transform:\r\n            return TransformEffect;\r\n        default:\r\n            console.warn(\"tried to get unknown effect \" + et + \": defaulting to ImageEffect\");\r\n            return ImageEffect;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport EffectLayer from './EffectLayer';\r\nimport {ControlComponent} from '../effects/Effect';\r\nimport ControlSlider from './ControlSlider';\r\nimport MatrixTable from './MatrixTable';\r\n\r\n// since react doesn't like nested state, this will be spread into\r\n// the state of EffectLayer.\r\nexport interface TransformControlState {\r\n    useMatrix : boolean;\r\n\r\n    translateX : number;\r\n    translateY : number;\r\n    scaleX : number;\r\n    scaleY : number;\r\n    rotate : number; // radians\r\n    shearX : number;\r\n    shearY : number;\r\n\r\n    // matrix remembers 6 elements\r\n    // applied as [[0, 1, 2],\r\n    //             [3, 4, 5],\r\n    //             [(0), (0), (1)]]\r\n    matrix : Array<number>;\r\n    viewMatrix: Array<string>;\r\n}\r\n\r\nexport interface TransformControlHandlers {\r\n    onSliderChange: (name:string, value:number) => void;\r\n    onUseMatrixChange: (useMatrix: boolean) => void;\r\n    onInputMatrixChange: (matrix: Array<number>) => void;\r\n    onViewMatrixChange: (viewMatrix: Array<string>) => void;\r\n}\r\n\r\ninterface Props {\r\n    control : TransformControlState,\r\n    handlers : TransformControlHandlers,\r\n}\r\n\r\nclass TransformControls extends React.Component<Props> {\r\n    static get controlFuncs () : ControlComponent {\r\n        return {\r\n            getHandlers     : TransformControls.getHandlers,\r\n            getFreshState   : TransformControls.getFreshState,\r\n            getControlState : TransformControls.getControlState,\r\n        };\r\n    };\r\n\r\n    static getFreshState () {\r\n        let state : TransformControlState = {\r\n            useMatrix : false,\r\n            translateX : 0,\r\n            translateY : 0,\r\n            scaleX : 1,\r\n            scaleY : 1,\r\n            rotate : 0,\r\n            shearX : 0,\r\n            shearY : 0,\r\n            matrix : [1, 0, 0, 0, 1, 0], // identity\r\n            viewMatrix: [\"1\", \"0\", \"0\", \"0\", \"1\", \"0\"],\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static getHandlers (el : EffectLayer) {\r\n        let handlers : TransformControlHandlers = {\r\n            onSliderChange: (name : string, value : number) => {\r\n                switch (name) {\r\n                    case \"translateX\":\r\n                        el.setState({translateX:value});\r\n                        break;\r\n                    case \"translateY\":\r\n                        el.setState({translateY:value});\r\n                        break;\r\n                    case \"scaleX\":\r\n                        el.setState({scaleX:value});\r\n                        break;\r\n                    case \"scaleY\":\r\n                        el.setState({scaleY:value});\r\n                        break;\r\n                    case \"rotate\":\r\n                        el.setState({rotate:value});\r\n                        break;\r\n                    case \"shearX\":\r\n                        el.setState({shearX:value});\r\n                        break;\r\n                    case \"shearY\":\r\n                        el.setState({shearY:value});\r\n                        break;\r\n                    default:\r\n                        console.log(\"TransformEffect: unknown slider change \" + name);\r\n                        return;\r\n                }\r\n            },\r\n\r\n            onUseMatrixChange: (useMatrix: boolean) => {\r\n                el.setState({ useMatrix:useMatrix });\r\n            },\r\n\r\n            onInputMatrixChange: (matrix: Array<number>) => {\r\n                el.setState({ matrix:matrix });\r\n            },\r\n\r\n            onViewMatrixChange: (viewMatrix: Array<string>) => {\r\n                el.setState({ viewMatrix:viewMatrix });\r\n            },\r\n        }\r\n        return handlers;\r\n    };\r\n\r\n    static getControlState (el : EffectLayer) {\r\n        let ctrl : TransformControlState = {\r\n            useMatrix : el.state.useMatrix,\r\n            translateX : el.state.translateX,\r\n            translateY : el.state.translateY,\r\n            scaleX : el.state.scaleX,\r\n            scaleY : el.state.scaleY,\r\n            rotate : el.state.rotate,\r\n            shearX : el.state.shearX,\r\n            shearY : el.state.shearY,\r\n            matrix : el.state.matrix,\r\n            viewMatrix : el.state.viewMatrix,\r\n        }\r\n        return ctrl;\r\n    };\r\n\r\n    handleSliderChange = (name : string, value : number) => {\r\n        this.props.handlers.onSliderChange(name, value);\r\n    };\r\n\r\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.props.handlers.onUseMatrixChange(event.target.checked);\r\n    };\r\n\r\n    handleMatrixChange = (ind : number, val : string) => {\r\n        //this.props.handlers.onInputMatrixChange([1, 0, 0, 1, 0, 0]);\r\n        console.log(\"Matrix received change at index \" + ind + \" : \" + val);\r\n\r\n        let newMatrix = Array.from(this.props.control.matrix);\r\n        newMatrix[ind] = parseFloat(val);\r\n        let newView = Array.from(this.props.control.viewMatrix);\r\n        newView[ind] = val;\r\n        this.props.handlers.onViewMatrixChange(newView);\r\n        this.props.handlers.onInputMatrixChange(newMatrix);\r\n    };\r\n\r\n    render() {\r\n        let bottom_controls = {};\r\n        let viewValues = [];\r\n        if (this.props.control.viewMatrix) {\r\n            viewValues = this.props.control.viewMatrix.concat([\"0\", \"0\", \"1\"]);\r\n        }\r\n        else {\r\n            viewValues = this.props.control.matrix.map(\r\n                (v: number)=>v.toString()).concat([\"0\", \"0\", \"1\"]);\r\n        }\r\n        if (this.props.control.useMatrix) {\r\n            bottom_controls = (<div>\r\n                <MatrixTable rows={3} cols={3} onChange={this.handleMatrixChange}\r\n                        values={viewValues}\r\n                        labels={[\"a\", \"c\", \"e\", \"b\", \"d\", \"f\"]}\r\n                        showInput={[true, true, true, true, true, true, false, false, false]}/>\r\n            </div>);\r\n        }\r\n        else {\r\n            bottom_controls = (<div>\r\n                <ControlSlider label=\"translate X\" name=\"translateX\" value={this.props.control.translateX} onChange={this.handleSliderChange} min={-2} max={2} units=\"x\"/>\r\n                <ControlSlider label=\"translate Y\" name=\"translateY\" value={this.props.control.translateY} onChange={this.handleSliderChange} min={-2} max={2} units=\"x\"/>\r\n                <ControlSlider label=\"scale X\" name=\"scaleX\" value={this.props.control.scaleX} onChange={this.handleSliderChange} min={-5} max={5} units=\"x\"/>\r\n                <ControlSlider label=\"scale Y\" name=\"scaleY\" value={this.props.control.scaleY} onChange={this.handleSliderChange} min={-5} max={5} units=\"x\"/>\r\n                <ControlSlider label=\"shear X\" name=\"shearX\" value={this.props.control.shearX} onChange={this.handleSliderChange} min={-Math.PI/2} max={Math.PI/2} units=\"rad\"/>\r\n                <ControlSlider label=\"shear Y\" name=\"shearY\" value={this.props.control.shearY} onChange={this.handleSliderChange} min={-Math.PI/2} max={Math.PI/2} units=\"rad\"/>\r\n                <ControlSlider label=\"rotate\" name=\"rotate\" value={this.props.control.rotate} onChange={this.handleSliderChange} min={-Math.PI} max={Math.PI} units=\"rad\"/>\r\n            </div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"controls-top\">\r\n                    <div className=\"controls-bar\">\r\n                        <div className=\"controls-label\">Custom Matrix</div>\r\n                        <input type=\"checkbox\" className=\"controls-toggle control\"\r\n                            checked={this.props.control.useMatrix} onChange={this.handleCheckboxChange}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controls-bottom\">\r\n                    {bottom_controls}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TransformControls;\r\n","import {Effect} from './Effect';\r\nimport {Sketcher} from '../components/EffectLayer';\r\nimport TransformControls from '../components/TransformControls';\r\n\r\n// Transform Effect.\r\n// Transforms according to controls, or applies a transformation matrix.\r\nvar TransformEffect : Effect = {\r\n    name : \"Transform\",\r\n    control : TransformControls.controlFuncs,\r\n\r\n    preLoad : (s:Sketcher) => {\r\n        \r\n    },\r\n\r\n    preDraw : (s:Sketcher) => {\r\n        s.clear();\r\n        s.resetMatrix();\r\n    },\r\n\r\n    draw : (s:Sketcher) => {\r\n        if (s.state.useMatrix) {\r\n            let mat = s.state.matrix;\r\n            // matrix holds [[a, c, e],\r\n            //               [b, d, f],\r\n            //               [0, 0, 1]]\r\n            // applied as (a, b, c, d, e, f)\r\n            //let arranged = [mat[0], mat[3], mat[1], mat[4], mat[2], mat[5]];\r\n            s.applyMatrix(mat[0], mat[3], mat[1], mat[4], mat[2], mat[5]);\r\n            s.image(s.baseImg, 0, 0);\r\n        }\r\n        else {\r\n            // transform so center of image is origin\r\n            s.translate(s.props.size/2, s.props.size/2);\r\n\r\n            // apply transform settings\r\n            s.scale(s.state.scaleX, s.state.scaleY);\r\n            s.translate(s.state.translateX * s.props.size, \r\n                s.state.translateY * s.props.size);\r\n            s.shearX(s.state.shearX);\r\n            s.shearY(s.state.shearY);\r\n            s.rotate(s.state.rotate);\r\n\r\n            // draw pixels around center\r\n            s.image(s.baseImg, -s.props.size/2, -s.props.size/2);\r\n        }\r\n    },\r\n};\r\n\r\nexport default TransformEffect;\r\n","import * as React from 'react';\r\nimport {EffectType} from '../effects/Effect';\r\n\r\nexport interface Props {\r\n    onAdd : (et : EffectType) => void;\r\n}\r\n\r\ninterface State {\r\n    selected : EffectType;\r\n}\r\n\r\nclass LayerAdder extends React.Component<Props, State> {\r\n    effects : Array<EffectType>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.effects = [];\r\n        for (let e in EffectType) {\r\n            this.effects.push(EffectType[e] as EffectType);\r\n        }\r\n        this.state = {selected:this.effects[0]};\r\n    }\r\n\r\n    handleSelection = (event : React.ChangeEvent<HTMLSelectElement>) => {\r\n        let i : number;\r\n        for (i = 0; i < this.effects.length; i++) {\r\n            if (this.effects[i] === event.target.value) {\r\n                this.setState({ selected : this.effects[i] });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAdd = () => {\r\n        this.props.onAdd(this.state.selected);\r\n    }\r\n\r\n    render() {\r\n        const effectList = this.effects.map((effect) => \r\n                <option value={effect} key={effect}>{effect}</option>\r\n            );\r\n        return (\r\n            <div>\r\n                <div>effects?</div>\r\n                <select value={this.state.selected} onChange={this.handleSelection}>\r\n                    {effectList}\r\n                </select>\r\n                <button onClick={this.handleAdd}>add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LayerAdder;\r\n","import * as React from 'react';\r\nimport {Layer} from './LayerStack';\r\nimport {Effect, EffectType, getEffect} from '../effects/Effect';\r\nimport ImageControls from './ImageControls';\r\nimport CodeControls from './CodeControls';\r\nimport TransformControls from './TransformControls';\r\n\r\nconst EFFECT_RENDERER = \"p2d\"; // \"webgl\" | \"p2d\" // webgl doesn't work very well yet\r\n\r\ninterface Props {\r\n    size : number;\r\n    ind : number;\r\n    type: EffectType;\r\n\r\n    callbackContainer: Layer;\r\n\r\n    onNewOutput: (eindex: number, pixels: Uint8ClampedArray) => void;\r\n    onRemove: (eindex: number) => void;\r\n    onMove: (eindex: number, diff: number) => number;\r\n\r\n    isFirst?: boolean;\r\n    isLast?: boolean;\r\n}\r\n\r\ninterface State {\r\n    [x:string]: any; // lifted state from inner components\r\n    basepixels?: Uint8ClampedArray; // (size * size * 4) length\r\n}\r\n\r\nexport interface Sketcher extends p5 {\r\n    props : Props;\r\n    state : State;\r\n    internal : any;\r\n    baseImg: p5.Image;\r\n}\r\n\r\nfunction getSketcher(parent : EffectLayer, effect : Effect) {\r\n    let sketcher = function (s : Sketcher) {\r\n        s.props = parent.props;\r\n        s.state = parent.state;\r\n        s.internal = {}; // for use by effect\r\n\r\n        s.preload = function() {\r\n            s.baseImg = s.createImage(s.props.size, s.props.size);\r\n\r\n            // one-time effect initialization\r\n            effect.preLoad(s, parent);\r\n        }\r\n\r\n        s.setup = function() {\r\n            s.pixelDensity(1);\r\n            s.createCanvas(s.props.size, s.props.size, EFFECT_RENDERER);\r\n        }\r\n\r\n        function preDraw() {\r\n            // re-fetch state.\r\n            s.state = parent.state;\r\n\r\n            // apply base pixels from previous layer to buffer image\r\n            let psize = s.props.size * s.props.size * 4;\r\n            s.baseImg.loadPixels();\r\n            if (s.state.basepixels) {\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = s.state.basepixels[i];\r\n                }\r\n            }\r\n            else {\r\n                // zero out base image;\r\n                for (let i = 0; i < psize; i++) {\r\n                    s.baseImg.pixels[i] = 0;\r\n                }\r\n            }\r\n            s.baseImg.updatePixels();\r\n\r\n            // prepare to draw this frame\r\n            effect.preDraw(s);\r\n        }\r\n\r\n        s.draw = function() {\r\n            preDraw();\r\n\r\n            // draw this frame\r\n            effect.draw(s);\r\n\r\n            // inform that new pixels are created\r\n            s.loadPixels();\r\n            parent.onOutput(Uint8ClampedArray.from(s.pixels));\r\n        }\r\n    };\r\n    return sketcher;\r\n}\r\n\r\nfunction getDefaultFilename(el : EffectLayer) {\r\n    return \"token-\" + el.props.size + \"px.png\";\r\n}\r\n\r\nclass EffectLayer extends React.PureComponent<Props, State> {\r\n    EMPTY_BASE: Uint8ClampedArray;\r\n    canvas?: p5;\r\n    effect: Effect;\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.EMPTY_BASE = new Uint8ClampedArray(this.props.size * this.props.size * 4);\r\n        this.props.callbackContainer.onNewBasePixels = this.handleBasePixelsChanged;\r\n        this.effect = getEffect(this.props.type);\r\n        this.state = {\r\n            ...this.effect.control.getFreshState(),\r\n        };\r\n        this.canvas = undefined;\r\n    }\r\n\r\n    handleBasePixelsChanged = (pixels?: Uint8ClampedArray | null) => {\r\n        if (pixels) {\r\n            this.setState({ basepixels: pixels });\r\n        }\r\n        else {\r\n            //console.log(\"EffectLayer: no base pixels\");\r\n            this.setState({ basepixels: this.EMPTY_BASE });\r\n        }\r\n    }\r\n\r\n    handleRemoveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onRemove) {\r\n            this.props.onRemove(this.props.ind);\r\n        }\r\n    }\r\n\r\n    handleSaveButtonPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.canvas) {\r\n            this.canvas.saveCanvas(getDefaultFilename(this));\r\n        }\r\n    }\r\n\r\n    handleMoveUpPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onMove) {\r\n            this.props.onMove(this.props.ind, 1);\r\n        }\r\n    }\r\n\r\n    handleMoveDownPressed = (event : React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (this.props.onMove) {\r\n            this.props.onMove(this.props.ind, -1);\r\n        }\r\n    }\r\n\r\n    onOutput = (pixels : Uint8ClampedArray) => {\r\n        // always emit, since it's difficult to tell when the next\r\n        // will need an update, even when we've not had a difference.\r\n        this.props.onNewOutput(this.props.ind, pixels);\r\n        return;\r\n    }\r\n\r\n    getCanvasID = () => {\r\n        return \"image-canvas-\" + this.props.callbackContainer.key;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = new window.p5(getSketcher(this, this.effect), document.getElementById(this.getCanvasID()) as HTMLElement);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log(\"EffectLayer: unmounting\");\r\n        if (this.canvas) {\r\n            this.canvas.remove();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let controls = <div className=\"controls\"></div>;\r\n        switch (this.props.type) {\r\n            case EffectType.Image: // falltrough\r\n            case EffectType.Mask:\r\n                controls = (\r\n                    <ImageControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)} parentEffectType={this.props.type}/>\r\n                    );\r\n                break;\r\n            case EffectType.Code:\r\n                controls = (\r\n                    <CodeControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            case EffectType.Transform:\r\n                controls = (\r\n                    <TransformControls control={this.effect.control.getControlState(this)} handlers={this.effect.control.getHandlers(this)}/>\r\n                    );\r\n                break;\r\n            default:\r\n                console.error(\"EffectLayer: can't render controls for unknown effect type\");\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"effect-container\" id={\"effect-container\"+this.props.callbackContainer.key}>\r\n                <div className=\"effect-title\">\r\n                    <button className=\"effect-move-up\"\r\n                        onClick={this.handleMoveUpPressed}\r\n                        disabled={this.props.isLast}>▲</button>\r\n                    <hr/>\r\n                    <div>[{this.props.ind + 1}]</div><div>{this.effect.name}</div>\r\n                    <button className=\"effect-save-button\"\r\n                        onClick={this.handleSaveButtonPressed}>save</button>\r\n                    <button className=\"effect-remove-button\"\r\n                        onClick={this.handleRemoveButtonPressed}>remove</button>\r\n                    <hr/>\r\n                    <button className=\"effect-move-down\"\r\n                        onClick={this.handleMoveDownPressed}\r\n                        disabled={this.props.isFirst}>▼</button>\r\n                </div>\r\n                <div className=\"effect-canvas\">\r\n                    <div className=\"canvas-container\" id={this.getCanvasID()}></div>\r\n                </div>\r\n                {controls}\r\n            </div>\r\n        );\r\n    }\r\n    // xoffset={this.state.xoffset} yoffset={this.state.yoffset} scale={this.state.scale}\r\n}\r\n\r\nexport default EffectLayer;\r\n","import * as React from 'react';\r\nimport LayerAdder from './LayerAdder';\r\nimport EffectLayer from './EffectLayer';\r\nimport {EffectType} from '../effects/Effect';\r\n\r\nexport interface Layer {\r\n    type : EffectType;\r\n    key : number;\r\n    onNewBasePixels: (pixels?: Uint8ClampedArray) => void; // empty until an EffectLayer constructor supplies it\r\n}\r\n\r\ninterface Props {\r\n    canvasSize : number;\r\n}\r\n\r\ninterface State {\r\n    layers : Array<Layer>;\r\n}\r\n\r\nclass LayerStack extends React.Component<Props,State> {\r\n    freeKey : number = 0;\r\n    results : Array<Uint8ClampedArray> = [];\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = { layers : [] };\r\n    }\r\n\r\n    newLayer = (et : EffectType) => {\r\n        const newLayers = this.state.layers.concat({ \r\n                type:et,\r\n                key:this.freeKey,\r\n                onNewBasePixels:()=>{},\r\n            });\r\n        this.freeKey++;\r\n        this.results.push(new Uint8ClampedArray(this.props.canvasSize * this.props.canvasSize * 4));\r\n        this.setState({ layers : newLayers });\r\n    };\r\n\r\n    handleNewOutput = (effectIndex : number, pixels : Uint8ClampedArray) => {\r\n        this.results[effectIndex] = pixels;\r\n        if (effectIndex < this.state.layers.length - 1) {\r\n          this.state.layers[effectIndex+1].onNewBasePixels(pixels);\r\n        }\r\n        return;\r\n    };\r\n\r\n    handleAddEffect = (et : EffectType) => {\r\n        this.newLayer(et);\r\n    };\r\n\r\n    handleRemoveEffect = (effectIndex : number) => {\r\n        if (effectIndex < 0 || effectIndex >= this.state.layers.length) {\r\n          console.error(\"can't remove effect at bad index \" + effectIndex);\r\n          return;\r\n        }\r\n        if (effectIndex < this.state.layers.length - 1) {\r\n          if (effectIndex > 0) {\r\n            this.state.layers[effectIndex+1].onNewBasePixels(this.results[effectIndex-1]);\r\n          }\r\n          else {\r\n            this.state.layers[effectIndex+1].onNewBasePixels();\r\n          }\r\n        }\r\n        this.results.splice(effectIndex, 1);\r\n        const newLayers = this.state.layers.slice(0,effectIndex).concat(this.state.layers.slice(effectIndex+1));\r\n        this.setState({ layers : newLayers });\r\n        };\r\n\r\n        handleMoveEffect = (effectIndex : number, move : number) => {\r\n        let newIndex = effectIndex + move;\r\n        if ( newIndex < 0 || newIndex >= this.state.layers.length) {\r\n          console.error(\"can't move effect \" + effectIndex + \" to position \" + newIndex);\r\n        }\r\n        const newLayers = this.state.layers.slice();\r\n        let removed = newLayers.splice(effectIndex, 1)[0];\r\n        newLayers.splice(newIndex, 0, removed);\r\n\r\n        this.setState({ layers : newLayers });\r\n        return newIndex;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.newLayer(EffectType.Image);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.layers.length > 0) {\r\n            this.state.layers[0].onNewBasePixels();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const layerList = this.state.layers.map((layer, index) => \r\n            <EffectLayer key={layer.key} type={layer.type} size={this.props.canvasSize} ind={index}\r\n                callbackContainer={layer}\r\n                onNewOutput={this.handleNewOutput}\r\n                onRemove={this.handleRemoveEffect}\r\n                onMove={this.handleMoveEffect}\r\n                isFirst={(index === 0)}\r\n                isLast={(index === this.state.layers.length-1)}/>\r\n          );\r\n        return (\r\n            <div key={this.props.canvasSize} className=\"layer-stack\">\r\n                <hr/>\r\n                    <LayerAdder onAdd={this.handleAddEffect}/>\r\n                <hr/>\r\n                <div className=\"list-container\">\r\n                <div className=\"list-side-spacer\"></div>\r\n                <div className=\"effect-list\">\r\n                    {layerList}\r\n                </div>\r\n                <div className=\"list-side-spacer\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default LayerStack;\r\n","import * as React from 'react';\r\nimport {DEFAULT_CANVAS_SIZE, MAX_CANVAS_SIZE} from '../App'\r\n\r\ninterface Props {\r\n    onSizeChange : (newSize : number) => void;\r\n}\r\n\r\ninterface State {\r\n    inputCanvasSize : string;\r\n}\r\n\r\n//const BUILT_INS = [...Array.from(Array(10).keys()).filter((i) => i > 4), 100];\r\n\r\nclass SizeSelector extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {\r\n            inputCanvasSize: DEFAULT_CANVAS_SIZE.toString(),\r\n        };\r\n    }\r\n\r\n    handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n        let sizeNum = parseInt(this.state.inputCanvasSize);\r\n        if (sizeNum) {\r\n            this.props.onSizeChange(sizeNum);\r\n        }\r\n        event.preventDefault();\r\n    };\r\n\r\n    handleInputChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ inputCanvasSize: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"size-selector\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                <div>Size (pixels):</div>\r\n                <input type=\"number\" min={1} max={MAX_CANVAS_SIZE} value={this.state.inputCanvasSize}\r\n                    onChange={this.handleInputChanged}/>\r\n                <input type=\"submit\" value=\"apply\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SizeSelector;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LayerStack from './components/LayerStack';\r\nimport SizeSelector from './components/SizeSelector';\r\n\r\nexport const DEFAULT_CANVAS_SIZE = Math.pow(2, 8); // 256\r\nexport const MAX_CANVAS_SIZE = Math.pow(2, 10);    // 1024\r\n\r\ninterface State {\r\n    canvasSize : number;\r\n}\r\n\r\nclass App extends React.Component<any,State> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = { canvasSize : DEFAULT_CANVAS_SIZE };\r\n    }\r\n\r\n    handleSizeChange = (newSize : number) => {\r\n        if (newSize > 0 && newSize <= MAX_CANVAS_SIZE) {\r\n            this.setState({canvasSize : newSize});\r\n        }\r\n        else {\r\n            console.error(\"Canvas size of \" + newSize + \" is not supported (max \" + MAX_CANVAS_SIZE + \").\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Token Clipper</h1>\r\n                <SizeSelector onSizeChange={this.handleSizeChange}/>\r\n                <LayerStack canvasSize={this.state.canvasSize}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}